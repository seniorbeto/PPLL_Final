    ################################################################################
    # Ejemplo de fichero Viper que pone a prueba:
    #   - Comentarios de línea y de bloque
    #   - Enteros (decimal, binario, octal y hexadecimal)
    #   - Reales (punto decimal y notación científica)
    #   - Caracteres
    #   - Booleanos (true, false)
    #   - Palabras reservadas: int, float, char, bool, def, return, type, if, else,
    #     and, or, not, while
    #   - Operadores aritméticos (+, -, *, /)
    #   - Operadores lógicos (and, or, not)
    #   - Operadores de comparación (==, >, >=, <, <=)
    #   - Delimitadores (llaves, paréntesis, punto y coma, dos puntos)
    #   - Identificadores
    #   - Uso de vectores y registros
    ################################################################################

    '''
    Este es un comentario de bloque
    que se extiende en varias lineas
    Puede contener caracteres especiales, etc
    '''

    # --- DECLARACIÓN DE TIPOS ---
    type MiRegistro:{
        int a
        float f
        char c
    }

    # --- DECLARACIÓN DE VARIABLES ---
    MiRegistro reg1            # Variable de tipo registro
    int x, y, z                # Varias variables int en una sola línea
    float valor, otra          # Variables de tipo float
    bool b                     # Variable booleana
    char car, otroCar          # Varias variables char
    int[5] vec                 # Vector de 5 enteros
    MiRegistro[2] regArray     # Vector de 2 registros de tipo MiRegistro

    # --- ASIGNACIONES BÁSICAS ---
    x = 42
    y = 0b101         # binario
    z = 0o712         # octal
    x = 0xAA          # hexadecimal
    x = 3 * 5 + 2 * 8
    valor = 12.34
    otra = 1.5e2      # notación científica (150.0)
    car = 'a'
    otroCar = '9'
    b = true
    b = false

    # --- PRUEBAS CON OPERADORES ---
    x = x + 10
    y = y - 1
    y = y * 2
    valor = valor / 2.0
    b = not b
    b = true and false
    b = false or (x == 170)    # 170 decimal es 0xAA

    # --- ASIGNACIONES A VECTORES Y PROPIEDADES DE REGISTRO ---
    vec[0] = 100
    vec[1] = x
    reg1.a = x
    reg1.f = valor
    reg1.c = car

    # --- USO DE len EN VECTORES ---
    z = vec.len               # z = 5

    # --- CONTROL DE FLUJO IF/ELSE ---
    if b: {
        x = x + 1 # Incrementa x si b es true
    }
    else :
    {
        x = x - 1
    }

    # --- BUCLE WHILE ---
    while not b:
    {
        y = y + 1
        if y > 20: {
            b = true
        }
    }

    # --- DECLARACIÓN DE FUNCIÓN ---
    def float hacerCalculo(int p; float q; bool r):
    {
        float resultado
        resultado = p + q
        if r:
        {
            resultado = resultado * 2
        }
        return resultado
    }

    # --- LLAMADA A FUNCIÓN ---
    valor = hacerCalculo(x, 3.14, b)

    # --- PRUEBAS ADICIONALES: COMPARACIONES ---
    b = (x >= y) or (reg1.a < 100)
    b = reg1.a == 0xAA

    ################################################################################
    # Fin del fichero .vip
    ################################################################################
