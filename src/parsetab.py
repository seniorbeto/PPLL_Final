
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftEQGTLTGELEleftPLUSMINUSleftTIMESDIVIDErightNOTAND BINARY BOOL_TYPE CHAR_CONST CHAR_TYPE COLON COMMA COMMENT DECIMAL DEF DIVIDE DOT ELSE EQ EQUALS FALSE FLOAT_CONST FLOAT_TYPE GE GT HEXADECIMAL ID IF INT_TYPE LBRACE LBRACKET LE LPAREN LT MINUS MLCOMMENT NEWLINE NOT OCTAL OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES TRUE TYPE WHILE\nprogram : statement_list\n          |\n\nstatement_list : statement_list statement\n               | statement\n\nstatement : declaration NEWLINE\n          | assignment NEWLINE\n          | if_statement\n          | TYPE register\n          | while_statement\n          | COMMENT NEWLINE\n          | MLCOMMENT NEWLINE\n          | funct_decl\n          | NEWLINE\n\ndeclaration : INT_TYPE var_list\n            | FLOAT_TYPE var_list\n            | CHAR_TYPE var_list\n            | BOOL_TYPE var_list\n            | ID ID\n\nregister : ID COLON block\n\nvar_decl : ID\n         | LBRACKET expression RBRACKET ID\n\nvar_list : var_list COMMA var_decl\n         | var_decl\n\nassignment : ID EQUALS expression\n            | ID LBRACKET DECIMAL RBRACKET EQUALS expression\n            | ID LBRACKET ID RBRACKET EQUALS expression\n            | declaration EQUALS expression\n            | ID EQUALS assignment\n            | ID DOT unique_assignment\n\nunique_assignment : ID EQUALS expression\n                  | ID LBRACKET DECIMAL RBRACKET EQUALS expression\n                    | ID LBRACKET ID RBRACKET EQUALS expression\n\nfunct_decl : DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct\n\ntype_funct : INT_TYPE\n           | FLOAT_TYPE\n           | BOOL_TYPE\n           | ID\n\narg_funct : type_funct ID extra another\n\nextra : COMMA ID extra\n        |\n\nanother : SEMICOLON arg_funct\n        |\n\nblock_funct : LBRACE statement_list funct_ret RBRACE\n\nfunct_ret : RETURN ID newlines\n\nnewlines : NEWLINE\n         |\n\nif_statement : IF expression COLON block else\n\nelse  : NEWLINE ELSE COLON block\n        | NEWLINE\n\nwhile_statement : WHILE expression COLON block\n\nblock : LBRACE statement_list RBRACE\n\nexpression : expression PLUS expression\n           | expression MINUS expression\n           | expression TIMES expression\n           | expression DIVIDE expression\n           | expression EQ expression\n           | expression GT expression\n           | expression LT expression\n           | expression GE expression\n           | expression LE expression\n           | expression AND expression\n           | expression OR expression\n\nexpression : NOT expression\n           | MINUS expression %prec MINUS\n           | PLUS expression %prec PLUS\n\nexpression : LPAREN expression RPAREN\n\nexpression : DECIMAL\n           | BINARY\n           | OCTAL\n           | HEXADECIMAL\n           | FLOAT_CONST\n           | TRUE\n           | FALSE\n           | CHAR_CONST\n\nexpression : ID\n'
    
_lr_action_items = {'$end':([0,1,2,3,5,7,9,12,21,22,24,25,27,28,90,111,120,121,124,140,144,151,],[-2,0,-1,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,-50,-47,-49,-51,-48,-33,-43,]),'TYPE':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[8,8,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,8,-50,8,-47,-49,-51,-48,-33,8,8,-43,]),'COMMENT':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[10,10,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,10,-50,10,-47,-49,-51,-48,-33,10,10,-43,]),'MLCOMMENT':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[11,11,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,11,-50,11,-47,-49,-51,-48,-33,11,11,-43,]),'NEWLINE':([0,2,3,4,5,6,7,9,10,11,12,21,22,24,25,27,28,29,30,31,33,34,35,36,45,46,47,48,49,50,51,52,53,60,64,65,66,71,84,85,86,90,91,92,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,117,120,121,124,125,126,138,139,140,144,145,148,151,152,],[5,5,-4,22,-13,24,-7,-9,27,28,-12,-3,-5,-6,-8,-10,-11,-14,-23,-20,-15,-16,-17,-18,-67,-68,-69,-70,-71,-72,-73,-74,-75,-27,-75,-24,-28,-29,-65,-64,-63,-19,5,-22,121,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,-50,5,-21,-30,-47,-49,-51,-26,-25,-32,-31,-48,-33,5,5,-43,154,]),'INT_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,37,90,91,111,112,113,120,121,124,140,142,144,145,148,151,],[13,13,-4,-13,-7,-9,-12,57,-3,-5,-6,-8,-10,-11,13,-19,13,-50,57,13,-47,-49,-51,-48,57,-33,13,13,-43,]),'FLOAT_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,37,90,91,111,112,113,120,121,124,140,142,144,145,148,151,],[14,14,-4,-13,-7,-9,-12,58,-3,-5,-6,-8,-10,-11,14,-19,14,-50,58,14,-47,-49,-51,-48,58,-33,14,14,-43,]),'CHAR_TYPE':([0,2,3,5,7,9,12,21,22,24,25,27,28,37,90,91,111,113,120,121,124,140,144,145,148,151,],[15,15,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,15,-19,15,-50,15,-47,-49,-51,-48,-33,15,15,-43,]),'BOOL_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,37,90,91,111,112,113,120,121,124,140,142,144,145,148,151,],[16,16,-4,-13,-7,-9,-12,59,-3,-5,-6,-8,-10,-11,16,-19,16,-50,59,16,-47,-49,-51,-48,59,-33,16,16,-43,]),'ID':([0,2,3,5,7,8,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,32,37,38,39,41,42,43,44,55,56,57,58,59,62,64,73,74,75,76,77,78,79,80,81,82,83,90,91,93,96,97,111,112,113,115,116,120,121,122,124,132,133,136,140,142,144,145,148,150,151,],[17,17,-4,-13,-7,26,-9,-12,31,31,31,31,36,53,53,56,-3,-5,53,-6,-8,-10,-11,53,64,68,70,53,53,53,53,89,-37,-34,-35,-36,31,36,53,53,53,53,53,53,53,53,53,53,53,-19,17,114,53,118,-50,56,17,53,53,-47,-49,130,-51,53,53,143,-48,56,-33,17,17,152,-43,]),'IF':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[18,18,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,18,-50,18,-47,-49,-51,-48,-33,18,18,-43,]),'WHILE':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[19,19,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,19,-50,19,-47,-49,-51,-48,-33,19,19,-43,]),'DEF':([0,2,3,5,7,9,12,21,22,24,25,27,28,90,91,111,113,120,121,124,140,144,145,148,151,],[20,20,-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,20,-50,20,-47,-49,-51,-48,-33,20,20,-43,]),'RBRACE':([3,5,7,9,12,21,22,24,25,27,28,90,111,113,120,121,124,140,144,149,151,152,153,154,],[-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,-50,124,-47,-49,-51,-48,-33,151,-43,-46,-44,-45,]),'RETURN':([3,5,7,9,12,21,22,24,25,27,28,90,111,120,121,124,140,144,148,151,],[-4,-13,-7,-9,-12,-3,-5,-6,-8,-10,-11,-19,-50,-47,-49,-51,-48,-33,150,-43,]),'EQUALS':([4,17,29,30,31,33,34,35,36,64,67,70,92,94,95,114,127,128,],[23,37,-14,-23,-20,-15,-16,-17,-18,37,23,96,-22,115,116,-21,132,133,]),'LBRACKET':([13,14,15,16,17,62,64,70,],[32,32,32,32,38,32,38,97,]),'DOT':([17,64,],[39,39,]),'NOT':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'MINUS':([18,19,23,32,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,63,64,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,96,99,100,101,102,103,104,105,106,107,108,109,110,115,116,117,125,126,132,133,138,139,],[42,42,42,42,42,74,42,42,42,42,-67,-68,-69,-70,-71,-72,-73,-74,-75,74,74,74,-75,74,42,42,42,42,42,42,42,42,42,42,42,-65,-64,-63,74,42,-52,-53,-54,-55,74,74,74,74,74,74,74,-66,42,42,74,74,74,42,42,74,74,]),'PLUS':([18,19,23,32,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,63,64,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,96,99,100,101,102,103,104,105,106,107,108,109,110,115,116,117,125,126,132,133,138,139,],[41,41,41,41,41,73,41,41,41,41,-67,-68,-69,-70,-71,-72,-73,-74,-75,73,73,73,-75,73,41,41,41,41,41,41,41,41,41,41,41,-65,-64,-63,73,41,-52,-53,-54,-55,73,73,73,73,73,73,73,-66,41,41,73,73,73,41,41,73,73,]),'LPAREN':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,89,96,115,116,132,133,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,112,44,44,44,44,44,]),'DECIMAL':([18,19,23,32,37,38,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,97,115,116,132,133,],[45,45,45,45,45,69,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,119,45,45,45,45,]),'BINARY':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'OCTAL':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'HEXADECIMAL':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FLOAT_CONST':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'TRUE':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FALSE':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'CHAR_CONST':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'COLON':([26,40,45,46,47,48,49,50,51,52,53,54,84,85,86,99,100,101,102,103,104,105,106,107,108,109,110,129,131,],[61,72,-67,-68,-69,-70,-71,-72,-73,-74,-75,88,-65,-64,-63,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,134,137,]),'COMMA':([29,30,31,33,34,35,92,114,130,143,],[62,-23,-20,62,62,62,-22,-21,136,136,]),'TIMES':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[75,-67,-68,-69,-70,-71,-72,-73,-74,-75,75,75,75,-75,75,75,75,-63,75,75,75,-54,-55,75,75,75,75,75,75,75,-66,75,75,75,75,75,]),'DIVIDE':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[76,-67,-68,-69,-70,-71,-72,-73,-74,-75,76,76,76,-75,76,76,76,-63,76,76,76,-54,-55,76,76,76,76,76,76,76,-66,76,76,76,76,76,]),'EQ':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[77,-67,-68,-69,-70,-71,-72,-73,-74,-75,77,77,77,-75,77,-65,-64,-63,77,-52,-53,-54,-55,-56,-57,-58,-59,-60,77,77,-66,77,77,77,77,77,]),'GT':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[78,-67,-68,-69,-70,-71,-72,-73,-74,-75,78,78,78,-75,78,-65,-64,-63,78,-52,-53,-54,-55,-56,-57,-58,-59,-60,78,78,-66,78,78,78,78,78,]),'LT':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[79,-67,-68,-69,-70,-71,-72,-73,-74,-75,79,79,79,-75,79,-65,-64,-63,79,-52,-53,-54,-55,-56,-57,-58,-59,-60,79,79,-66,79,79,79,79,79,]),'GE':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[80,-67,-68,-69,-70,-71,-72,-73,-74,-75,80,80,80,-75,80,-65,-64,-63,80,-52,-53,-54,-55,-56,-57,-58,-59,-60,80,80,-66,80,80,80,80,80,]),'LE':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[81,-67,-68,-69,-70,-71,-72,-73,-74,-75,81,81,81,-75,81,-65,-64,-63,81,-52,-53,-54,-55,-56,-57,-58,-59,-60,81,81,-66,81,81,81,81,81,]),'AND':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[82,-67,-68,-69,-70,-71,-72,-73,-74,-75,82,82,82,-75,82,-65,-64,-63,82,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,82,82,82,82,82,]),'OR':([40,45,46,47,48,49,50,51,52,53,54,60,63,64,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,117,125,126,138,139,],[83,-67,-68,-69,-70,-71,-72,-73,-74,-75,83,83,83,-75,83,-65,-64,-63,83,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,83,83,83,83,83,]),'RBRACKET':([45,46,47,48,49,50,51,52,53,63,68,69,84,85,86,99,100,101,102,103,104,105,106,107,108,109,110,118,119,],[-67,-68,-69,-70,-71,-72,-73,-74,-75,93,94,95,-65,-64,-63,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,127,128,]),'RPAREN':([45,46,47,48,49,50,51,52,53,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,110,123,130,135,141,143,146,147,],[-67,-68,-69,-70,-71,-72,-73,-74,-75,-65,-64,-63,110,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-66,131,-40,-42,-38,-40,-41,-39,]),'LBRACE':([61,72,88,134,137,],[91,91,91,91,145,]),'ELSE':([121,],[129,]),'SEMICOLON':([130,135,143,147,],[-40,142,-40,-39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,91,145,],[2,113,148,]),'statement':([0,2,91,113,145,148,],[3,21,3,21,3,21,]),'declaration':([0,2,37,91,113,145,148,],[4,4,67,4,4,4,4,]),'assignment':([0,2,37,91,113,145,148,],[6,6,66,6,6,6,6,]),'if_statement':([0,2,91,113,145,148,],[7,7,7,7,7,7,]),'while_statement':([0,2,91,113,145,148,],[9,9,9,9,9,9,]),'funct_decl':([0,2,91,113,145,148,],[12,12,12,12,12,12,]),'register':([8,],[25,]),'var_list':([13,14,15,16,],[29,33,34,35,]),'var_decl':([13,14,15,16,62,],[30,30,30,30,92,]),'expression':([18,19,23,32,37,41,42,43,44,73,74,75,76,77,78,79,80,81,82,83,96,115,116,132,133,],[40,54,60,63,65,84,85,86,87,99,100,101,102,103,104,105,106,107,108,109,117,125,126,138,139,]),'type_funct':([20,112,142,],[55,122,122,]),'unique_assignment':([39,],[71,]),'block':([61,72,88,134,],[90,98,111,140,]),'else':([98,],[120,]),'arg_funct':([112,142,],[123,146,]),'extra':([130,143,],[135,147,]),'another':([135,],[141,]),'block_funct':([137,],[144,]),'funct_ret':([148,],[149,]),'newlines':([152,],[153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',56),
  ('program -> <empty>','program',0,'p_program','parser.py',57),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',69),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',70),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',83),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',84),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',85),
  ('statement -> TYPE register','statement',2,'p_statement','parser.py',86),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',87),
  ('statement -> COMMENT NEWLINE','statement',2,'p_statement','parser.py',88),
  ('statement -> MLCOMMENT NEWLINE','statement',2,'p_statement','parser.py',89),
  ('statement -> funct_decl','statement',1,'p_statement','parser.py',90),
  ('statement -> NEWLINE','statement',1,'p_statement','parser.py',91),
  ('declaration -> INT_TYPE var_list','declaration',2,'p_declaration','parser.py',103),
  ('declaration -> FLOAT_TYPE var_list','declaration',2,'p_declaration','parser.py',104),
  ('declaration -> CHAR_TYPE var_list','declaration',2,'p_declaration','parser.py',105),
  ('declaration -> BOOL_TYPE var_list','declaration',2,'p_declaration','parser.py',106),
  ('declaration -> ID ID','declaration',2,'p_declaration','parser.py',107),
  ('register -> ID COLON block','register',3,'p_register','parser.py',116),
  ('var_decl -> ID','var_decl',1,'p_var_decl','parser.py',123),
  ('var_decl -> LBRACKET expression RBRACKET ID','var_decl',4,'p_var_decl','parser.py',124),
  ('var_list -> var_list COMMA var_decl','var_list',3,'p_var_list','parser.py',138),
  ('var_list -> var_decl','var_list',1,'p_var_list','parser.py',139),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',154),
  ('assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression','assignment',6,'p_assignment','parser.py',155),
  ('assignment -> ID LBRACKET ID RBRACKET EQUALS expression','assignment',6,'p_assignment','parser.py',156),
  ('assignment -> declaration EQUALS expression','assignment',3,'p_assignment','parser.py',157),
  ('assignment -> ID EQUALS assignment','assignment',3,'p_assignment','parser.py',158),
  ('assignment -> ID DOT unique_assignment','assignment',3,'p_assignment','parser.py',159),
  ('unique_assignment -> ID EQUALS expression','unique_assignment',3,'p_unique_assignment','parser.py',181),
  ('unique_assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression','unique_assignment',6,'p_unique_assignment','parser.py',182),
  ('unique_assignment -> ID LBRACKET ID RBRACKET EQUALS expression','unique_assignment',6,'p_unique_assignment','parser.py',183),
  ('funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct','funct_decl',8,'p_funct_decl','parser.py',199),
  ('type_funct -> INT_TYPE','type_funct',1,'p_type_funct','parser.py',207),
  ('type_funct -> FLOAT_TYPE','type_funct',1,'p_type_funct','parser.py',208),
  ('type_funct -> BOOL_TYPE','type_funct',1,'p_type_funct','parser.py',209),
  ('type_funct -> ID','type_funct',1,'p_type_funct','parser.py',210),
  ('arg_funct -> type_funct ID extra another','arg_funct',4,'p_arg_funct','parser.py',216),
  ('extra -> COMMA ID extra','extra',3,'p_extra','parser.py',220),
  ('extra -> <empty>','extra',0,'p_extra','parser.py',221),
  ('another -> SEMICOLON arg_funct','another',2,'p_another','parser.py',225),
  ('another -> <empty>','another',0,'p_another','parser.py',226),
  ('block_funct -> LBRACE statement_list funct_ret RBRACE','block_funct',4,'p_block_funct','parser.py',231),
  ('funct_ret -> RETURN ID newlines','funct_ret',3,'p_funct_ret','parser.py',236),
  ('newlines -> NEWLINE','newlines',1,'p_newlines','parser.py',240),
  ('newlines -> <empty>','newlines',0,'p_newlines','parser.py',241),
  ('if_statement -> IF expression COLON block else','if_statement',5,'p_if_statement','parser.py',255),
  ('else -> NEWLINE ELSE COLON block','else',4,'p_else','parser.py',266),
  ('else -> NEWLINE','else',1,'p_else','parser.py',267),
  ('while_statement -> WHILE expression COLON block','while_statement',4,'p_while_statement','parser.py',275),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',283),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',295),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',296),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',297),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',298),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',299),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',300),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',301),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',302),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',303),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',304),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',305),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',311),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',312),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','parser.py',313),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',319),
  ('expression -> DECIMAL','expression',1,'p_expression_literal','parser.py',325),
  ('expression -> BINARY','expression',1,'p_expression_literal','parser.py',326),
  ('expression -> OCTAL','expression',1,'p_expression_literal','parser.py',327),
  ('expression -> HEXADECIMAL','expression',1,'p_expression_literal','parser.py',328),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_literal','parser.py',329),
  ('expression -> TRUE','expression',1,'p_expression_literal','parser.py',330),
  ('expression -> FALSE','expression',1,'p_expression_literal','parser.py',331),
  ('expression -> CHAR_CONST','expression',1,'p_expression_literal','parser.py',332),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',340),
]
