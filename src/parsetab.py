
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftEQGTLTGELEleftPLUSMINUSleftTIMESDIVIDErightNOTAND BINARY BOOL_TYPE CHAR_CONST CHAR_TYPE COLON COMMA COMMENT DECIMAL DEF DIVIDE DOT ELSE EQ EQUALS FALSE FLOAT_CONST FLOAT_TYPE GE GT HEXADECIMAL ID IF INT_TYPE LBRACE LBRACKET LE LPAREN LT MINUS MLCOMMENT NEWLINE NOT OCTAL OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES TRUE TYPE WHILE\nprogram : statement_list\n          |\n\nstatement_list : statement_list statement\n               | statement\n\nstatement : declaration NEWLINE\n          | assignment NEWLINE\n          | if_statement\n          | TYPE register\n          | while_statement\n          | COMMENT NEWLINE\n          | MLCOMMENT NEWLINE\n          | funct_decl\n          | NEWLINE\n\ndeclaration : INT_TYPE var_list\n            | FLOAT_TYPE var_list\n            | CHAR_TYPE var_list\n            | BOOL_TYPE var_list\n\nregister : ID COLON block\n\nvar_decl : ID\n         | LBRACKET expression RBRACKET ID\n\nvar_list : var_list COMMA var_decl\n         | var_decl\n\nassignment : ID EQUALS expression\n            | ID LBRACKET DECIMAL RBRACKET EQUALS expression\n            | ID LBRACKET ID RBRACKET EQUALS expression\n            | declaration EQUALS expression\n            | ID EQUALS assignment\n\nfunct_decl : DEF\n\nif_statement : IF expression COLON block else\n\nelse  : NEWLINE ELSE COLON block\n        | NEWLINE\n\nwhile_statement : WHILE expression COLON block\n\nblock : LBRACE statement_list RBRACE\n\nexpression : expression PLUS expression\n           | expression MINUS expression\n           | expression TIMES expression\n           | expression DIVIDE expression\n           | expression EQ expression\n           | expression GT expression\n           | expression LT expression\n           | expression GE expression\n           | expression LE expression\n           | expression AND expression\n           | expression OR expression\n\nexpression : NOT expression\n           | MINUS expression %prec MINUS\n           | PLUS expression %prec PLUS\n\nexpression : LPAREN expression RPAREN\n\nexpression : DECIMAL\n           | BINARY\n           | OCTAL\n           | HEXADECIMAL\n           | FLOAT_CONST\n           | TRUE\n           | FALSE\n           | CHAR_CONST\n\ntype_funct : DECIMAL\n           | FLOAT_TYPE\n           | BOOL_TYPE\n\nexpression : ID\n'
    
_lr_action_items = {'$end':([0,1,2,3,5,7,9,12,20,21,22,24,25,27,28,80,99,104,105,106,111,],[-2,0,-1,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,-32,-29,-31,-33,-30,]),'TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[8,8,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,8,-32,8,-29,-31,-33,-30,]),'COMMENT':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[10,10,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,10,-32,10,-29,-31,-33,-30,]),'MLCOMMENT':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[11,11,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,11,-32,11,-29,-31,-33,-30,]),'NEWLINE':([0,2,3,4,5,6,7,9,10,11,12,20,21,22,24,25,27,28,29,30,31,33,34,35,43,44,45,46,47,48,49,50,51,53,57,58,59,75,76,77,80,81,82,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,111,],[5,5,-4,22,-13,24,-7,-9,27,28,-12,-28,-3,-5,-6,-8,-10,-11,-14,-22,-19,-15,-16,-17,-49,-50,-51,-52,-53,-54,-55,-56,-60,-26,-60,-23,-27,-47,-46,-45,-18,5,-21,105,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-32,5,-20,-29,-31,-33,-25,-24,-30,]),'INT_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,36,80,81,99,100,104,105,106,111,],[13,13,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,13,-18,13,-32,13,-29,-31,-33,-30,]),'FLOAT_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,36,80,81,99,100,104,105,106,111,],[14,14,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,14,-18,14,-32,14,-29,-31,-33,-30,]),'CHAR_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,36,80,81,99,100,104,105,106,111,],[15,15,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,15,-18,15,-32,15,-29,-31,-33,-30,]),'BOOL_TYPE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,36,80,81,99,100,104,105,106,111,],[16,16,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,16,-18,16,-32,16,-29,-31,-33,-30,]),'ID':([0,2,3,5,7,8,9,12,13,14,15,16,18,19,20,21,22,23,24,25,27,28,32,36,37,39,40,41,42,55,64,65,66,67,68,69,70,71,72,73,74,80,81,83,99,100,102,103,104,105,106,111,],[17,17,-4,-13,-7,26,-9,-12,31,31,31,31,51,51,-28,-3,-5,51,-6,-8,-10,-11,51,57,61,51,51,51,51,31,51,51,51,51,51,51,51,51,51,51,51,-18,17,101,-32,17,51,51,-29,-31,-33,-30,]),'IF':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[18,18,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,18,-32,18,-29,-31,-33,-30,]),'WHILE':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[19,19,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,19,-32,19,-29,-31,-33,-30,]),'DEF':([0,2,3,5,7,9,12,20,21,22,24,25,27,28,80,81,99,100,104,105,106,111,],[20,20,-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,20,-32,20,-29,-31,-33,-30,]),'RBRACE':([3,5,7,9,12,20,21,22,24,25,27,28,80,99,100,104,105,106,111,],[-4,-13,-7,-9,-12,-28,-3,-5,-6,-8,-10,-11,-18,-32,106,-29,-31,-33,-30,]),'EQUALS':([4,17,29,30,31,33,34,35,57,60,82,84,85,101,],[23,36,-14,-22,-19,-15,-16,-17,36,23,-21,102,103,-20,]),'LBRACKET':([13,14,15,16,17,55,57,],[32,32,32,32,37,32,37,]),'NOT':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'MINUS':([18,19,23,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,102,103,107,108,],[40,40,40,40,40,65,40,40,40,40,-49,-50,-51,-52,-53,-54,-55,-56,-60,65,65,65,-60,65,40,40,40,40,40,40,40,40,40,40,40,-47,-46,-45,65,-34,-35,-36,-37,65,65,65,65,65,65,65,-48,40,40,65,65,]),'PLUS':([18,19,23,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,102,103,107,108,],[39,39,39,39,39,64,39,39,39,39,-49,-50,-51,-52,-53,-54,-55,-56,-60,64,64,64,-60,64,39,39,39,39,39,39,39,39,39,39,39,-47,-46,-45,64,-34,-35,-36,-37,64,64,64,64,64,64,64,-48,39,39,64,64,]),'LPAREN':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'DECIMAL':([18,19,23,32,36,37,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[43,43,43,43,43,62,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'BINARY':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'OCTAL':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'HEXADECIMAL':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'FLOAT_CONST':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'CHAR_CONST':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'COLON':([26,38,43,44,45,46,47,48,49,50,51,52,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,109,],[54,63,-49,-50,-51,-52,-53,-54,-55,-56,-60,79,-47,-46,-45,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,110,]),'COMMA':([29,30,31,33,34,35,82,101,],[55,-22,-19,55,55,55,-21,-20,]),'TIMES':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[66,-49,-50,-51,-52,-53,-54,-55,-56,-60,66,66,66,-60,66,66,66,-45,66,66,66,-36,-37,66,66,66,66,66,66,66,-48,66,66,]),'DIVIDE':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[67,-49,-50,-51,-52,-53,-54,-55,-56,-60,67,67,67,-60,67,67,67,-45,67,67,67,-36,-37,67,67,67,67,67,67,67,-48,67,67,]),'EQ':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[68,-49,-50,-51,-52,-53,-54,-55,-56,-60,68,68,68,-60,68,-47,-46,-45,68,-34,-35,-36,-37,-38,-39,-40,-41,-42,68,68,-48,68,68,]),'GT':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[69,-49,-50,-51,-52,-53,-54,-55,-56,-60,69,69,69,-60,69,-47,-46,-45,69,-34,-35,-36,-37,-38,-39,-40,-41,-42,69,69,-48,69,69,]),'LT':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[70,-49,-50,-51,-52,-53,-54,-55,-56,-60,70,70,70,-60,70,-47,-46,-45,70,-34,-35,-36,-37,-38,-39,-40,-41,-42,70,70,-48,70,70,]),'GE':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[71,-49,-50,-51,-52,-53,-54,-55,-56,-60,71,71,71,-60,71,-47,-46,-45,71,-34,-35,-36,-37,-38,-39,-40,-41,-42,71,71,-48,71,71,]),'LE':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[72,-49,-50,-51,-52,-53,-54,-55,-56,-60,72,72,72,-60,72,-47,-46,-45,72,-34,-35,-36,-37,-38,-39,-40,-41,-42,72,72,-48,72,72,]),'AND':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[73,-49,-50,-51,-52,-53,-54,-55,-56,-60,73,73,73,-60,73,-47,-46,-45,73,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,73,73,]),'OR':([38,43,44,45,46,47,48,49,50,51,52,53,56,57,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,107,108,],[74,-49,-50,-51,-52,-53,-54,-55,-56,-60,74,74,74,-60,74,-47,-46,-45,74,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,74,74,]),'RBRACKET':([43,44,45,46,47,48,49,50,51,56,61,62,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,],[-49,-50,-51,-52,-53,-54,-55,-56,-60,83,84,85,-47,-46,-45,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,]),'RPAREN':([43,44,45,46,47,48,49,50,51,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,],[-49,-50,-51,-52,-53,-54,-55,-56,-60,-47,-46,-45,98,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,]),'LBRACE':([54,63,79,110,],[81,81,81,81,]),'ELSE':([105,],[109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,81,],[2,100,]),'statement':([0,2,81,100,],[3,21,3,21,]),'declaration':([0,2,36,81,100,],[4,4,60,4,4,]),'assignment':([0,2,36,81,100,],[6,6,59,6,6,]),'if_statement':([0,2,81,100,],[7,7,7,7,]),'while_statement':([0,2,81,100,],[9,9,9,9,]),'funct_decl':([0,2,81,100,],[12,12,12,12,]),'register':([8,],[25,]),'var_list':([13,14,15,16,],[29,33,34,35,]),'var_decl':([13,14,15,16,55,],[30,30,30,30,82,]),'expression':([18,19,23,32,36,39,40,41,42,64,65,66,67,68,69,70,71,72,73,74,102,103,],[38,52,53,56,58,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,107,108,]),'block':([54,63,79,110,],[80,86,99,111,]),'else':([86,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',56),
  ('program -> <empty>','program',0,'p_program','parser.py',57),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',69),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',70),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',83),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',84),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',85),
  ('statement -> TYPE register','statement',2,'p_statement','parser.py',86),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',87),
  ('statement -> COMMENT NEWLINE','statement',2,'p_statement','parser.py',88),
  ('statement -> MLCOMMENT NEWLINE','statement',2,'p_statement','parser.py',89),
  ('statement -> funct_decl','statement',1,'p_statement','parser.py',90),
  ('statement -> NEWLINE','statement',1,'p_statement','parser.py',91),
  ('declaration -> INT_TYPE var_list','declaration',2,'p_declaration','parser.py',103),
  ('declaration -> FLOAT_TYPE var_list','declaration',2,'p_declaration','parser.py',104),
  ('declaration -> CHAR_TYPE var_list','declaration',2,'p_declaration','parser.py',105),
  ('declaration -> BOOL_TYPE var_list','declaration',2,'p_declaration','parser.py',106),
  ('register -> ID COLON block','register',3,'p_register','parser.py',115),
  ('var_decl -> ID','var_decl',1,'p_var_decl','parser.py',122),
  ('var_decl -> LBRACKET expression RBRACKET ID','var_decl',4,'p_var_decl','parser.py',123),
  ('var_list -> var_list COMMA var_decl','var_list',3,'p_var_list','parser.py',137),
  ('var_list -> var_decl','var_list',1,'p_var_list','parser.py',138),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',153),
  ('assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression','assignment',6,'p_assignment','parser.py',154),
  ('assignment -> ID LBRACKET ID RBRACKET EQUALS expression','assignment',6,'p_assignment','parser.py',155),
  ('assignment -> declaration EQUALS expression','assignment',3,'p_assignment','parser.py',156),
  ('assignment -> ID EQUALS assignment','assignment',3,'p_assignment','parser.py',157),
  ('funct_decl -> DEF','funct_decl',1,'p_funct_decl','parser.py',185),
  ('if_statement -> IF expression COLON block else','if_statement',5,'p_if_statement','parser.py',201),
  ('else -> NEWLINE ELSE COLON block','else',4,'p_else','parser.py',212),
  ('else -> NEWLINE','else',1,'p_else','parser.py',213),
  ('while_statement -> WHILE expression COLON block','while_statement',4,'p_while_statement','parser.py',221),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',229),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',241),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',242),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',243),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',244),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',245),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',246),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',247),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',248),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',249),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',250),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',251),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',257),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',258),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','parser.py',259),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',265),
  ('expression -> DECIMAL','expression',1,'p_expression_literal','parser.py',271),
  ('expression -> BINARY','expression',1,'p_expression_literal','parser.py',272),
  ('expression -> OCTAL','expression',1,'p_expression_literal','parser.py',273),
  ('expression -> HEXADECIMAL','expression',1,'p_expression_literal','parser.py',274),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_literal','parser.py',275),
  ('expression -> TRUE','expression',1,'p_expression_literal','parser.py',276),
  ('expression -> FALSE','expression',1,'p_expression_literal','parser.py',277),
  ('expression -> CHAR_CONST','expression',1,'p_expression_literal','parser.py',278),
  ('type_funct -> DECIMAL','type_funct',1,'p_type_funct','parser.py',284),
  ('type_funct -> FLOAT_TYPE','type_funct',1,'p_type_funct','parser.py',285),
  ('type_funct -> BOOL_TYPE','type_funct',1,'p_type_funct','parser.py',286),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',291),
]
