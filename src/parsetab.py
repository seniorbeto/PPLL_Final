
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftEQGTLTGELEleftPLUSMINUSleftTIMESDIVIDErightNOTAND BINARY BOOL_TYPE CHAR_CONST CHAR_TYPE COLON COMMA COMMENT DECIMAL DEF DIVIDE DOT ELSE EQ EQUALS FALSE FLOAT_CONST FLOAT_TYPE GE GT HEXADECIMAL ID IF INT_TYPE LBRACE LBRACKET LE LPAREN LT MINUS MLCOMMENT NEWLINE NOT OCTAL OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES TRUE TYPE WHILE\nprogram : statement_list\n\nstatement_list : statement_list statement\n               | statement\n\nstatement : declaration NEWLINE\n          | assignment NEWLINE\n          | if_statement\n          | while_statement\n          | COMMENT NEWLINE\n          | MLCOMMENT NEWLINE\n          | NEWLINE\n\ndeclaration : INT_TYPE var_list\n            | FLOAT_TYPE var_list\n            | CHAR_TYPE var_list\n            | BOOL_TYPE var_list\n\nvar_decl : ID\n         | LBRACKET expression RBRACKET ID\n\nvar_list : var_list COMMA var_decl\n         | var_decl\n\nassignment : ID EQUALS expression\n            | ID LBRACKET expression RBRACKET EQUALS expression\n            | declaration EQUALS expression\n            | ID EQUALS assignment\n\nif_statement : IF expression COLON block\n             | IF expression COLON block newlines ELSE COLON block\n\nnewlines : NEWLINE\n         | newlines NEWLINE\n         |\n\nwhile_statement : WHILE expression COLON block\n\nblock : LBRACE statement_list RBRACE\n\nexpression : expression PLUS expression\n           | expression MINUS expression\n           | expression TIMES expression\n           | expression DIVIDE expression\n           | expression EQ expression\n           | expression GT expression\n           | expression LT expression\n           | expression GE expression\n           | expression LE expression\n           | expression AND expression\n           | expression OR expression\n\nexpression : NOT expression\n           | MINUS expression %prec MINUS\n           | PLUS expression %prec PLUS\n\nexpression : LPAREN expression RPAREN\n\nexpression : DECIMAL\n           | BINARY\n           | OCTAL\n           | HEXADECIMAL\n           | FLOAT_CONST\n           | TRUE\n           | FALSE\n           | CHAR_CONST\n\nexpression : ID\n'
    
_lr_action_items = {'COMMENT':([0,2,3,5,7,8,18,19,21,22,23,76,77,90,95,99,101,],[9,9,-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,9,-28,9,-29,-24,]),'MLCOMMENT':([0,2,3,5,7,8,18,19,21,22,23,76,77,90,95,99,101,],[10,10,-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,10,-28,10,-29,-24,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,18,19,21,22,23,24,25,26,28,29,30,38,39,40,41,42,43,44,45,46,48,51,52,53,68,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,98,99,101,],[5,5,-3,19,-10,21,-6,-7,22,23,-2,-4,-5,-8,-9,-11,-18,-15,-12,-13,-14,-45,-46,-47,-48,-49,-50,-51,-52,-53,-21,-53,-19,-22,-43,-42,-41,-17,94,5,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,-28,-16,98,-25,5,-20,-26,-29,-24,]),'INT_TYPE':([0,2,3,5,7,8,18,19,21,22,23,31,76,77,90,95,99,101,],[11,11,-3,-10,-6,-7,-2,-4,-5,-8,-9,11,-23,11,-28,11,-29,-24,]),'FLOAT_TYPE':([0,2,3,5,7,8,18,19,21,22,23,31,76,77,90,95,99,101,],[12,12,-3,-10,-6,-7,-2,-4,-5,-8,-9,12,-23,12,-28,12,-29,-24,]),'CHAR_TYPE':([0,2,3,5,7,8,18,19,21,22,23,31,76,77,90,95,99,101,],[13,13,-3,-10,-6,-7,-2,-4,-5,-8,-9,13,-23,13,-28,13,-29,-24,]),'BOOL_TYPE':([0,2,3,5,7,8,18,19,21,22,23,31,76,77,90,95,99,101,],[14,14,-3,-10,-6,-7,-2,-4,-5,-8,-9,14,-23,14,-28,14,-29,-24,]),'ID':([0,2,3,5,7,8,11,12,13,14,16,17,18,19,20,21,22,23,27,31,32,34,35,36,37,49,57,58,59,60,61,62,63,64,65,66,67,74,76,77,90,92,95,99,101,],[15,15,-3,-10,-6,-7,26,26,26,26,46,46,-2,-4,46,-5,-8,-9,46,51,46,46,46,46,46,26,46,46,46,46,46,46,46,46,46,46,46,91,-23,15,-28,46,15,-29,-24,]),'IF':([0,2,3,5,7,8,18,19,21,22,23,76,77,90,95,99,101,],[16,16,-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,16,-28,16,-29,-24,]),'WHILE':([0,2,3,5,7,8,18,19,21,22,23,76,77,90,95,99,101,],[17,17,-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,17,-28,17,-29,-24,]),'$end':([1,2,3,5,7,8,18,19,21,22,23,76,90,99,101,],[0,-1,-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,-28,-29,-24,]),'RBRACE':([3,5,7,8,18,19,21,22,23,76,90,95,99,101,],[-3,-10,-6,-7,-2,-4,-5,-8,-9,-23,-28,99,-29,-24,]),'EQUALS':([4,15,24,25,26,28,29,30,51,54,73,75,91,],[20,31,-11,-18,-15,-12,-13,-14,31,20,-17,92,-16,]),'LBRACKET':([11,12,13,14,15,49,51,],[27,27,27,27,32,27,32,]),'NOT':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'MINUS':([16,17,20,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,92,96,],[35,35,35,35,35,35,58,35,35,35,35,-45,-46,-47,-48,-49,-50,-51,-52,-53,58,58,58,-53,58,58,35,35,35,35,35,35,35,35,35,35,35,-43,-42,-41,58,-30,-31,-32,-33,58,58,58,58,58,58,58,-44,35,58,]),'PLUS':([16,17,20,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,92,96,],[34,34,34,34,34,34,57,34,34,34,34,-45,-46,-47,-48,-49,-50,-51,-52,-53,57,57,57,-53,57,57,34,34,34,34,34,34,34,34,34,34,34,-43,-42,-41,57,-30,-31,-32,-33,57,57,57,57,57,57,57,-44,34,57,]),'LPAREN':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'DECIMAL':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'BINARY':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'OCTAL':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'HEXADECIMAL':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FLOAT_CONST':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'TRUE':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FALSE':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CHAR_CONST':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'COMMA':([24,25,26,28,29,30,73,91,],[49,-18,-15,49,49,49,-17,-16,]),'COLON':([33,38,39,40,41,42,43,44,45,46,47,68,69,70,78,79,80,81,82,83,84,85,86,87,88,89,97,],[56,-45,-46,-47,-48,-49,-50,-51,-52,-53,72,-43,-42,-41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,100,]),'TIMES':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[59,-45,-46,-47,-48,-49,-50,-51,-52,-53,59,59,59,-53,59,59,59,59,-41,59,59,59,-32,-33,59,59,59,59,59,59,59,-44,59,]),'DIVIDE':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[60,-45,-46,-47,-48,-49,-50,-51,-52,-53,60,60,60,-53,60,60,60,60,-41,60,60,60,-32,-33,60,60,60,60,60,60,60,-44,60,]),'EQ':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[61,-45,-46,-47,-48,-49,-50,-51,-52,-53,61,61,61,-53,61,61,-43,-42,-41,61,-30,-31,-32,-33,-34,-35,-36,-37,-38,61,61,-44,61,]),'GT':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[62,-45,-46,-47,-48,-49,-50,-51,-52,-53,62,62,62,-53,62,62,-43,-42,-41,62,-30,-31,-32,-33,-34,-35,-36,-37,-38,62,62,-44,62,]),'LT':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[63,-45,-46,-47,-48,-49,-50,-51,-52,-53,63,63,63,-53,63,63,-43,-42,-41,63,-30,-31,-32,-33,-34,-35,-36,-37,-38,63,63,-44,63,]),'GE':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[64,-45,-46,-47,-48,-49,-50,-51,-52,-53,64,64,64,-53,64,64,-43,-42,-41,64,-30,-31,-32,-33,-34,-35,-36,-37,-38,64,64,-44,64,]),'LE':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[65,-45,-46,-47,-48,-49,-50,-51,-52,-53,65,65,65,-53,65,65,-43,-42,-41,65,-30,-31,-32,-33,-34,-35,-36,-37,-38,65,65,-44,65,]),'AND':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[66,-45,-46,-47,-48,-49,-50,-51,-52,-53,66,66,66,-53,66,66,-43,-42,-41,66,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,66,]),'OR':([33,38,39,40,41,42,43,44,45,46,47,48,50,51,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,96,],[67,-45,-46,-47,-48,-49,-50,-51,-52,-53,67,67,67,-53,67,67,-43,-42,-41,67,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,67,]),'RBRACKET':([38,39,40,41,42,43,44,45,46,50,55,68,69,70,78,79,80,81,82,83,84,85,86,87,88,89,],[-45,-46,-47,-48,-49,-50,-51,-52,-53,74,75,-43,-42,-41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,]),'RPAREN':([38,39,40,41,42,43,44,45,46,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,89,],[-45,-46,-47,-48,-49,-50,-51,-52,-53,-43,-42,-41,89,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-44,]),'LBRACE':([56,72,100,],[77,77,77,]),'ELSE':([76,93,94,98,99,],[-27,97,-25,-26,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,77,],[2,95,]),'statement':([0,2,77,95,],[3,18,3,18,]),'declaration':([0,2,31,77,95,],[4,4,54,4,4,]),'assignment':([0,2,31,77,95,],[6,6,53,6,6,]),'if_statement':([0,2,77,95,],[7,7,7,7,]),'while_statement':([0,2,77,95,],[8,8,8,8,]),'var_list':([11,12,13,14,],[24,28,29,30,]),'var_decl':([11,12,13,14,49,],[25,25,25,25,73,]),'expression':([16,17,20,27,31,32,34,35,36,37,57,58,59,60,61,62,63,64,65,66,67,92,],[33,47,48,50,52,55,68,69,70,71,78,79,80,81,82,83,84,85,86,87,88,96,]),'block':([56,72,100,],[76,90,101,]),'newlines':([76,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',56),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',68),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',69),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',82),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',83),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',84),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',85),
  ('statement -> COMMENT NEWLINE','statement',2,'p_statement','parser.py',86),
  ('statement -> MLCOMMENT NEWLINE','statement',2,'p_statement','parser.py',87),
  ('statement -> NEWLINE','statement',1,'p_statement','parser.py',88),
  ('declaration -> INT_TYPE var_list','declaration',2,'p_declaration','parser.py',100),
  ('declaration -> FLOAT_TYPE var_list','declaration',2,'p_declaration','parser.py',101),
  ('declaration -> CHAR_TYPE var_list','declaration',2,'p_declaration','parser.py',102),
  ('declaration -> BOOL_TYPE var_list','declaration',2,'p_declaration','parser.py',103),
  ('var_decl -> ID','var_decl',1,'p_var_decl','parser.py',112),
  ('var_decl -> LBRACKET expression RBRACKET ID','var_decl',4,'p_var_decl','parser.py',113),
  ('var_list -> var_list COMMA var_decl','var_list',3,'p_var_list','parser.py',127),
  ('var_list -> var_decl','var_list',1,'p_var_list','parser.py',128),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',142),
  ('assignment -> ID LBRACKET expression RBRACKET EQUALS expression','assignment',6,'p_assignment','parser.py',143),
  ('assignment -> declaration EQUALS expression','assignment',3,'p_assignment','parser.py',144),
  ('assignment -> ID EQUALS assignment','assignment',3,'p_assignment','parser.py',145),
  ('if_statement -> IF expression COLON block','if_statement',4,'p_if_statement','parser.py',175),
  ('if_statement -> IF expression COLON block newlines ELSE COLON block','if_statement',8,'p_if_statement','parser.py',176),
  ('newlines -> NEWLINE','newlines',1,'p_newlines','parser.py',187),
  ('newlines -> newlines NEWLINE','newlines',2,'p_newlines','parser.py',188),
  ('newlines -> <empty>','newlines',0,'p_newlines','parser.py',189),
  ('while_statement -> WHILE expression COLON block','while_statement',4,'p_while_statement','parser.py',200),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',208),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',220),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',221),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',222),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',223),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',224),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',225),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',226),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',227),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',228),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',229),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',230),
  ('expression -> NOT expression','expression',2,'p_expression_unary','parser.py',236),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',237),
  ('expression -> PLUS expression','expression',2,'p_expression_unary','parser.py',238),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',244),
  ('expression -> DECIMAL','expression',1,'p_expression_literal','parser.py',250),
  ('expression -> BINARY','expression',1,'p_expression_literal','parser.py',251),
  ('expression -> OCTAL','expression',1,'p_expression_literal','parser.py',252),
  ('expression -> HEXADECIMAL','expression',1,'p_expression_literal','parser.py',253),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_literal','parser.py',254),
  ('expression -> TRUE','expression',1,'p_expression_literal','parser.py',255),
  ('expression -> FALSE','expression',1,'p_expression_literal','parser.py',256),
  ('expression -> CHAR_CONST','expression',1,'p_expression_literal','parser.py',257),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',263),
]
