DEF def
INT_TYPE int
ID foo
LPAREN (
INT_TYPE int
ID a
COMMA ,
ID b
SEMICOLON ;
CHAR_TYPE char
ID c
RPAREN )
COLON :
LBRACE {
NEWLINE nl
INT_TYPE int
ID a
NEWLINE nl
INT_TYPE int
ID b
NEWLINE nl
CHAR_TYPE char
ID c
NEWLINE nl
RETURN return
DECIMAL 0
NEWLINE nl
RBRACE }
NEWLINE nl
INT_TYPE int
ID function
EQUALS =
ID foo
LPAREN (
DECIMAL 1
PLUS +
DECIMAL 3
TIMES *
LPAREN (
ID a
MINUS -
ID b
RPAREN )
COMMA ,
DECIMAL 3
COMMA ,
CHAR_CONST a
RPAREN )
NEWLINE nl
INT_TYPE int
ID a
NEWLINE nl
ID a
EQUALS =
ID foo
LPAREN (
DECIMAL 3
COMMA ,
DECIMAL 4
COMMA ,
DECIMAL 5
RPAREN )
PLUS +
ID foo
LPAREN (
DECIMAL 5
COMMA ,
DECIMAL 6
COMMA ,
DECIMAL 7
RPAREN )
NEWLINE nl
DEF def
FLOAT_TYPE float
ID float_func
LPAREN (
RPAREN )
COLON :
LBRACE {
NEWLINE nl
INT_TYPE int
ID a
NEWLINE nl
INT_TYPE int
ID b
NEWLINE nl
CHAR_TYPE char
ID c
NEWLINE nl
RETURN return
ID float_func
LPAREN (
ID a
COMMA ,
ID b
COMMA ,
ID c
RPAREN )
NEWLINE nl
RBRACE }
NEWLINE nl
FLOAT_TYPE float
ID result
EQUALS =
ID float_func
LPAREN (
RPAREN )
MINUS -
FLOAT_CONST 3.14
