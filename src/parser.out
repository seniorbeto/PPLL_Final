Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEF
    DOT
    RETURN
    SEMICOLON
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration NEWLINE
Rule 5     statement -> assignment NEWLINE
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> COMMENT NEWLINE
Rule 9     statement -> MLCOMMENT NEWLINE
Rule 10    statement -> NEWLINE
Rule 11    declaration -> INT_TYPE var_list
Rule 12    declaration -> FLOAT_TYPE var_list
Rule 13    declaration -> CHAR_TYPE var_list
Rule 14    declaration -> BOOL_TYPE var_list
Rule 15    var_decl -> ID
Rule 16    var_decl -> LBRACKET expression RBRACKET ID
Rule 17    var_list -> var_list COMMA var_decl
Rule 18    var_list -> var_decl
Rule 19    assignment -> ID EQUALS expression
Rule 20    assignment -> ID LBRACKET expression RBRACKET EQUALS expression
Rule 21    assignment -> declaration EQUALS expression
Rule 22    assignment -> ID EQUALS assignment
Rule 23    if_statement -> IF expression COLON block
Rule 24    if_statement -> IF expression COLON block newlines ELSE COLON block
Rule 25    newlines -> NEWLINE
Rule 26    newlines -> newlines NEWLINE
Rule 27    newlines -> <empty>
Rule 28    while_statement -> WHILE expression COLON block
Rule 29    block -> LBRACE statement_list RBRACE
Rule 30    expression -> expression PLUS expression
Rule 31    expression -> expression MINUS expression
Rule 32    expression -> expression TIMES expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    expression -> expression EQ expression
Rule 35    expression -> expression GT expression
Rule 36    expression -> expression LT expression
Rule 37    expression -> expression GE expression
Rule 38    expression -> expression LE expression
Rule 39    expression -> expression AND expression
Rule 40    expression -> expression OR expression
Rule 41    expression -> NOT expression
Rule 42    expression -> MINUS expression
Rule 43    expression -> PLUS expression
Rule 44    expression -> LPAREN expression RPAREN
Rule 45    expression -> DECIMAL
Rule 46    expression -> BINARY
Rule 47    expression -> OCTAL
Rule 48    expression -> HEXADECIMAL
Rule 49    expression -> FLOAT_CONST
Rule 50    expression -> TRUE
Rule 51    expression -> FALSE
Rule 52    expression -> CHAR_CONST
Rule 53    expression -> ID

Terminals, with rules where they appear

AND                  : 39
BINARY               : 46
BOOL_TYPE            : 14
CHAR_CONST           : 52
CHAR_TYPE            : 13
COLON                : 23 24 24 28
COMMA                : 17
COMMENT              : 8
DECIMAL              : 45
DEF                  : 
DIVIDE               : 33
DOT                  : 
ELSE                 : 24
EQ                   : 34
EQUALS               : 19 20 21 22
FALSE                : 51
FLOAT_CONST          : 49
FLOAT_TYPE           : 12
GE                   : 37
GT                   : 35
HEXADECIMAL          : 48
ID                   : 15 16 19 20 22 53
IF                   : 23 24
INT_TYPE             : 11
LBRACE               : 29
LBRACKET             : 16 20
LE                   : 38
LPAREN               : 44
LT                   : 36
MINUS                : 31 42
MLCOMMENT            : 9
NEWLINE              : 4 5 8 9 10 25 26
NOT                  : 41
OCTAL                : 47
OR                   : 40
PLUS                 : 30 43
RBRACE               : 29
RBRACKET             : 16 20
RETURN               : 
RPAREN               : 44
SEMICOLON            : 
TIMES                : 32
TRUE                 : 50
TYPE                 : 
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

assignment           : 5 22
block                : 23 24 24 28
declaration          : 4 21
expression           : 16 19 20 20 21 23 24 28 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 43 44
if_statement         : 6
newlines             : 24 26
program              : 0
statement            : 2 3
statement_list       : 1 2 29
var_decl             : 17 18
var_list             : 11 12 13 14 17
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . COMMENT NEWLINE
    (9) statement -> . MLCOMMENT NEWLINE
    (10) statement -> . NEWLINE
    (11) declaration -> . INT_TYPE var_list
    (12) declaration -> . FLOAT_TYPE var_list
    (13) declaration -> . CHAR_TYPE var_list
    (14) declaration -> . BOOL_TYPE var_list
    (19) assignment -> . ID EQUALS expression
    (20) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression
    (21) assignment -> . declaration EQUALS expression
    (22) assignment -> . ID EQUALS assignment
    (23) if_statement -> . IF expression COLON block
    (24) if_statement -> . IF expression COLON block newlines ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block

    COMMENT         shift and go to state 9
    MLCOMMENT       shift and go to state 10
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 11
    FLOAT_TYPE      shift and go to state 12
    CHAR_TYPE       shift and go to state 13
    BOOL_TYPE       shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . COMMENT NEWLINE
    (9) statement -> . MLCOMMENT NEWLINE
    (10) statement -> . NEWLINE
    (11) declaration -> . INT_TYPE var_list
    (12) declaration -> . FLOAT_TYPE var_list
    (13) declaration -> . CHAR_TYPE var_list
    (14) declaration -> . BOOL_TYPE var_list
    (19) assignment -> . ID EQUALS expression
    (20) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression
    (21) assignment -> . declaration EQUALS expression
    (22) assignment -> . ID EQUALS assignment
    (23) if_statement -> . IF expression COLON block
    (24) if_statement -> . IF expression COLON block newlines ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block

    $end            reduce using rule 1 (program -> statement_list .)
    COMMENT         shift and go to state 9
    MLCOMMENT       shift and go to state 10
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 11
    FLOAT_TYPE      shift and go to state 12
    CHAR_TYPE       shift and go to state 13
    BOOL_TYPE       shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17

    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8

state 3

    (3) statement_list -> statement .

    COMMENT         reduce using rule 3 (statement_list -> statement .)
    MLCOMMENT       reduce using rule 3 (statement_list -> statement .)
    NEWLINE         reduce using rule 3 (statement_list -> statement .)
    INT_TYPE        reduce using rule 3 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 3 (statement_list -> statement .)
    CHAR_TYPE       reduce using rule 3 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 3 (statement_list -> statement .)
    ID              reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> declaration . NEWLINE
    (21) assignment -> declaration . EQUALS expression

    NEWLINE         shift and go to state 19
    EQUALS          shift and go to state 20


state 5

    (10) statement -> NEWLINE .

    COMMENT         reduce using rule 10 (statement -> NEWLINE .)
    MLCOMMENT       reduce using rule 10 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> NEWLINE .)
    INT_TYPE        reduce using rule 10 (statement -> NEWLINE .)
    FLOAT_TYPE      reduce using rule 10 (statement -> NEWLINE .)
    CHAR_TYPE       reduce using rule 10 (statement -> NEWLINE .)
    BOOL_TYPE       reduce using rule 10 (statement -> NEWLINE .)
    ID              reduce using rule 10 (statement -> NEWLINE .)
    IF              reduce using rule 10 (statement -> NEWLINE .)
    WHILE           reduce using rule 10 (statement -> NEWLINE .)
    $end            reduce using rule 10 (statement -> NEWLINE .)
    RBRACE          reduce using rule 10 (statement -> NEWLINE .)


state 6

    (5) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 21


state 7

    (6) statement -> if_statement .

    COMMENT         reduce using rule 6 (statement -> if_statement .)
    MLCOMMENT       reduce using rule 6 (statement -> if_statement .)
    NEWLINE         reduce using rule 6 (statement -> if_statement .)
    INT_TYPE        reduce using rule 6 (statement -> if_statement .)
    FLOAT_TYPE      reduce using rule 6 (statement -> if_statement .)
    CHAR_TYPE       reduce using rule 6 (statement -> if_statement .)
    BOOL_TYPE       reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 8

    (7) statement -> while_statement .

    COMMENT         reduce using rule 7 (statement -> while_statement .)
    MLCOMMENT       reduce using rule 7 (statement -> while_statement .)
    NEWLINE         reduce using rule 7 (statement -> while_statement .)
    INT_TYPE        reduce using rule 7 (statement -> while_statement .)
    FLOAT_TYPE      reduce using rule 7 (statement -> while_statement .)
    CHAR_TYPE       reduce using rule 7 (statement -> while_statement .)
    BOOL_TYPE       reduce using rule 7 (statement -> while_statement .)
    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    RBRACE          reduce using rule 7 (statement -> while_statement .)


state 9

    (8) statement -> COMMENT . NEWLINE

    NEWLINE         shift and go to state 22


state 10

    (9) statement -> MLCOMMENT . NEWLINE

    NEWLINE         shift and go to state 23


state 11

    (11) declaration -> INT_TYPE . var_list
    (17) var_list -> . var_list COMMA var_decl
    (18) var_list -> . var_decl
    (15) var_decl -> . ID
    (16) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 26
    LBRACKET        shift and go to state 27

    var_list                       shift and go to state 24
    var_decl                       shift and go to state 25

state 12

    (12) declaration -> FLOAT_TYPE . var_list
    (17) var_list -> . var_list COMMA var_decl
    (18) var_list -> . var_decl
    (15) var_decl -> . ID
    (16) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 26
    LBRACKET        shift and go to state 27

    var_list                       shift and go to state 28
    var_decl                       shift and go to state 25

state 13

    (13) declaration -> CHAR_TYPE . var_list
    (17) var_list -> . var_list COMMA var_decl
    (18) var_list -> . var_decl
    (15) var_decl -> . ID
    (16) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 26
    LBRACKET        shift and go to state 27

    var_list                       shift and go to state 29
    var_decl                       shift and go to state 25

state 14

    (14) declaration -> BOOL_TYPE . var_list
    (17) var_list -> . var_list COMMA var_decl
    (18) var_list -> . var_decl
    (15) var_decl -> . ID
    (16) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 26
    LBRACKET        shift and go to state 27

    var_list                       shift and go to state 30
    var_decl                       shift and go to state 25

state 15

    (19) assignment -> ID . EQUALS expression
    (20) assignment -> ID . LBRACKET expression RBRACKET EQUALS expression
    (22) assignment -> ID . EQUALS assignment

    EQUALS          shift and go to state 31
    LBRACKET        shift and go to state 32


state 16

    (23) if_statement -> IF . expression COLON block
    (24) if_statement -> IF . expression COLON block newlines ELSE COLON block
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 33

state 17

    (28) while_statement -> WHILE . expression COLON block
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 47

state 18

    (2) statement_list -> statement_list statement .

    COMMENT         reduce using rule 2 (statement_list -> statement_list statement .)
    MLCOMMENT       reduce using rule 2 (statement_list -> statement_list statement .)
    NEWLINE         reduce using rule 2 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 2 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 2 (statement_list -> statement_list statement .)
    CHAR_TYPE       reduce using rule 2 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 2 (statement_list -> statement_list statement .)
    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 19

    (4) statement -> declaration NEWLINE .

    COMMENT         reduce using rule 4 (statement -> declaration NEWLINE .)
    MLCOMMENT       reduce using rule 4 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> declaration NEWLINE .)
    INT_TYPE        reduce using rule 4 (statement -> declaration NEWLINE .)
    FLOAT_TYPE      reduce using rule 4 (statement -> declaration NEWLINE .)
    CHAR_TYPE       reduce using rule 4 (statement -> declaration NEWLINE .)
    BOOL_TYPE       reduce using rule 4 (statement -> declaration NEWLINE .)
    ID              reduce using rule 4 (statement -> declaration NEWLINE .)
    IF              reduce using rule 4 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 4 (statement -> declaration NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration NEWLINE .)
    RBRACE          reduce using rule 4 (statement -> declaration NEWLINE .)


state 20

    (21) assignment -> declaration EQUALS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 48

state 21

    (5) statement -> assignment NEWLINE .

    COMMENT         reduce using rule 5 (statement -> assignment NEWLINE .)
    MLCOMMENT       reduce using rule 5 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> assignment NEWLINE .)
    INT_TYPE        reduce using rule 5 (statement -> assignment NEWLINE .)
    FLOAT_TYPE      reduce using rule 5 (statement -> assignment NEWLINE .)
    CHAR_TYPE       reduce using rule 5 (statement -> assignment NEWLINE .)
    BOOL_TYPE       reduce using rule 5 (statement -> assignment NEWLINE .)
    ID              reduce using rule 5 (statement -> assignment NEWLINE .)
    IF              reduce using rule 5 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 5 (statement -> assignment NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment NEWLINE .)
    RBRACE          reduce using rule 5 (statement -> assignment NEWLINE .)


state 22

    (8) statement -> COMMENT NEWLINE .

    COMMENT         reduce using rule 8 (statement -> COMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 8 (statement -> COMMENT NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> COMMENT NEWLINE .)
    INT_TYPE        reduce using rule 8 (statement -> COMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 8 (statement -> COMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 8 (statement -> COMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 8 (statement -> COMMENT NEWLINE .)
    ID              reduce using rule 8 (statement -> COMMENT NEWLINE .)
    IF              reduce using rule 8 (statement -> COMMENT NEWLINE .)
    WHILE           reduce using rule 8 (statement -> COMMENT NEWLINE .)
    $end            reduce using rule 8 (statement -> COMMENT NEWLINE .)
    RBRACE          reduce using rule 8 (statement -> COMMENT NEWLINE .)


state 23

    (9) statement -> MLCOMMENT NEWLINE .

    COMMENT         reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    INT_TYPE        reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    ID              reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    IF              reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    WHILE           reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    $end            reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)
    RBRACE          reduce using rule 9 (statement -> MLCOMMENT NEWLINE .)


state 24

    (11) declaration -> INT_TYPE var_list .
    (17) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 11 (declaration -> INT_TYPE var_list .)
    EQUALS          reduce using rule 11 (declaration -> INT_TYPE var_list .)
    COMMA           shift and go to state 49


state 25

    (18) var_list -> var_decl .

    COMMA           reduce using rule 18 (var_list -> var_decl .)
    NEWLINE         reduce using rule 18 (var_list -> var_decl .)
    EQUALS          reduce using rule 18 (var_list -> var_decl .)


state 26

    (15) var_decl -> ID .

    COMMA           reduce using rule 15 (var_decl -> ID .)
    NEWLINE         reduce using rule 15 (var_decl -> ID .)
    EQUALS          reduce using rule 15 (var_decl -> ID .)


state 27

    (16) var_decl -> LBRACKET . expression RBRACKET ID
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 50

state 28

    (12) declaration -> FLOAT_TYPE var_list .
    (17) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 12 (declaration -> FLOAT_TYPE var_list .)
    EQUALS          reduce using rule 12 (declaration -> FLOAT_TYPE var_list .)
    COMMA           shift and go to state 49


state 29

    (13) declaration -> CHAR_TYPE var_list .
    (17) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 13 (declaration -> CHAR_TYPE var_list .)
    EQUALS          reduce using rule 13 (declaration -> CHAR_TYPE var_list .)
    COMMA           shift and go to state 49


state 30

    (14) declaration -> BOOL_TYPE var_list .
    (17) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 14 (declaration -> BOOL_TYPE var_list .)
    EQUALS          reduce using rule 14 (declaration -> BOOL_TYPE var_list .)
    COMMA           shift and go to state 49


state 31

    (19) assignment -> ID EQUALS . expression
    (22) assignment -> ID EQUALS . assignment
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID
    (19) assignment -> . ID EQUALS expression
    (20) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression
    (21) assignment -> . declaration EQUALS expression
    (22) assignment -> . ID EQUALS assignment
    (11) declaration -> . INT_TYPE var_list
    (12) declaration -> . FLOAT_TYPE var_list
    (13) declaration -> . CHAR_TYPE var_list
    (14) declaration -> . BOOL_TYPE var_list

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 51
    INT_TYPE        shift and go to state 11
    FLOAT_TYPE      shift and go to state 12
    CHAR_TYPE       shift and go to state 13
    BOOL_TYPE       shift and go to state 14

    expression                     shift and go to state 52
    assignment                     shift and go to state 53
    declaration                    shift and go to state 54

state 32

    (20) assignment -> ID LBRACKET . expression RBRACKET EQUALS expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 55

state 33

    (23) if_statement -> IF expression . COLON block
    (24) if_statement -> IF expression . COLON block newlines ELSE COLON block
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 34

    (43) expression -> PLUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 68

state 35

    (42) expression -> MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 69

state 36

    (41) expression -> NOT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 70

state 37

    (44) expression -> LPAREN . expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 71

state 38

    (45) expression -> DECIMAL .

    COLON           reduce using rule 45 (expression -> DECIMAL .)
    PLUS            reduce using rule 45 (expression -> DECIMAL .)
    MINUS           reduce using rule 45 (expression -> DECIMAL .)
    TIMES           reduce using rule 45 (expression -> DECIMAL .)
    DIVIDE          reduce using rule 45 (expression -> DECIMAL .)
    EQ              reduce using rule 45 (expression -> DECIMAL .)
    GT              reduce using rule 45 (expression -> DECIMAL .)
    LT              reduce using rule 45 (expression -> DECIMAL .)
    GE              reduce using rule 45 (expression -> DECIMAL .)
    LE              reduce using rule 45 (expression -> DECIMAL .)
    AND             reduce using rule 45 (expression -> DECIMAL .)
    OR              reduce using rule 45 (expression -> DECIMAL .)
    NEWLINE         reduce using rule 45 (expression -> DECIMAL .)
    RBRACKET        reduce using rule 45 (expression -> DECIMAL .)
    RPAREN          reduce using rule 45 (expression -> DECIMAL .)


state 39

    (46) expression -> BINARY .

    COLON           reduce using rule 46 (expression -> BINARY .)
    PLUS            reduce using rule 46 (expression -> BINARY .)
    MINUS           reduce using rule 46 (expression -> BINARY .)
    TIMES           reduce using rule 46 (expression -> BINARY .)
    DIVIDE          reduce using rule 46 (expression -> BINARY .)
    EQ              reduce using rule 46 (expression -> BINARY .)
    GT              reduce using rule 46 (expression -> BINARY .)
    LT              reduce using rule 46 (expression -> BINARY .)
    GE              reduce using rule 46 (expression -> BINARY .)
    LE              reduce using rule 46 (expression -> BINARY .)
    AND             reduce using rule 46 (expression -> BINARY .)
    OR              reduce using rule 46 (expression -> BINARY .)
    NEWLINE         reduce using rule 46 (expression -> BINARY .)
    RBRACKET        reduce using rule 46 (expression -> BINARY .)
    RPAREN          reduce using rule 46 (expression -> BINARY .)


state 40

    (47) expression -> OCTAL .

    COLON           reduce using rule 47 (expression -> OCTAL .)
    PLUS            reduce using rule 47 (expression -> OCTAL .)
    MINUS           reduce using rule 47 (expression -> OCTAL .)
    TIMES           reduce using rule 47 (expression -> OCTAL .)
    DIVIDE          reduce using rule 47 (expression -> OCTAL .)
    EQ              reduce using rule 47 (expression -> OCTAL .)
    GT              reduce using rule 47 (expression -> OCTAL .)
    LT              reduce using rule 47 (expression -> OCTAL .)
    GE              reduce using rule 47 (expression -> OCTAL .)
    LE              reduce using rule 47 (expression -> OCTAL .)
    AND             reduce using rule 47 (expression -> OCTAL .)
    OR              reduce using rule 47 (expression -> OCTAL .)
    NEWLINE         reduce using rule 47 (expression -> OCTAL .)
    RBRACKET        reduce using rule 47 (expression -> OCTAL .)
    RPAREN          reduce using rule 47 (expression -> OCTAL .)


state 41

    (48) expression -> HEXADECIMAL .

    COLON           reduce using rule 48 (expression -> HEXADECIMAL .)
    PLUS            reduce using rule 48 (expression -> HEXADECIMAL .)
    MINUS           reduce using rule 48 (expression -> HEXADECIMAL .)
    TIMES           reduce using rule 48 (expression -> HEXADECIMAL .)
    DIVIDE          reduce using rule 48 (expression -> HEXADECIMAL .)
    EQ              reduce using rule 48 (expression -> HEXADECIMAL .)
    GT              reduce using rule 48 (expression -> HEXADECIMAL .)
    LT              reduce using rule 48 (expression -> HEXADECIMAL .)
    GE              reduce using rule 48 (expression -> HEXADECIMAL .)
    LE              reduce using rule 48 (expression -> HEXADECIMAL .)
    AND             reduce using rule 48 (expression -> HEXADECIMAL .)
    OR              reduce using rule 48 (expression -> HEXADECIMAL .)
    NEWLINE         reduce using rule 48 (expression -> HEXADECIMAL .)
    RBRACKET        reduce using rule 48 (expression -> HEXADECIMAL .)
    RPAREN          reduce using rule 48 (expression -> HEXADECIMAL .)


state 42

    (49) expression -> FLOAT_CONST .

    COLON           reduce using rule 49 (expression -> FLOAT_CONST .)
    PLUS            reduce using rule 49 (expression -> FLOAT_CONST .)
    MINUS           reduce using rule 49 (expression -> FLOAT_CONST .)
    TIMES           reduce using rule 49 (expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 49 (expression -> FLOAT_CONST .)
    EQ              reduce using rule 49 (expression -> FLOAT_CONST .)
    GT              reduce using rule 49 (expression -> FLOAT_CONST .)
    LT              reduce using rule 49 (expression -> FLOAT_CONST .)
    GE              reduce using rule 49 (expression -> FLOAT_CONST .)
    LE              reduce using rule 49 (expression -> FLOAT_CONST .)
    AND             reduce using rule 49 (expression -> FLOAT_CONST .)
    OR              reduce using rule 49 (expression -> FLOAT_CONST .)
    NEWLINE         reduce using rule 49 (expression -> FLOAT_CONST .)
    RBRACKET        reduce using rule 49 (expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 49 (expression -> FLOAT_CONST .)


state 43

    (50) expression -> TRUE .

    COLON           reduce using rule 50 (expression -> TRUE .)
    PLUS            reduce using rule 50 (expression -> TRUE .)
    MINUS           reduce using rule 50 (expression -> TRUE .)
    TIMES           reduce using rule 50 (expression -> TRUE .)
    DIVIDE          reduce using rule 50 (expression -> TRUE .)
    EQ              reduce using rule 50 (expression -> TRUE .)
    GT              reduce using rule 50 (expression -> TRUE .)
    LT              reduce using rule 50 (expression -> TRUE .)
    GE              reduce using rule 50 (expression -> TRUE .)
    LE              reduce using rule 50 (expression -> TRUE .)
    AND             reduce using rule 50 (expression -> TRUE .)
    OR              reduce using rule 50 (expression -> TRUE .)
    NEWLINE         reduce using rule 50 (expression -> TRUE .)
    RBRACKET        reduce using rule 50 (expression -> TRUE .)
    RPAREN          reduce using rule 50 (expression -> TRUE .)


state 44

    (51) expression -> FALSE .

    COLON           reduce using rule 51 (expression -> FALSE .)
    PLUS            reduce using rule 51 (expression -> FALSE .)
    MINUS           reduce using rule 51 (expression -> FALSE .)
    TIMES           reduce using rule 51 (expression -> FALSE .)
    DIVIDE          reduce using rule 51 (expression -> FALSE .)
    EQ              reduce using rule 51 (expression -> FALSE .)
    GT              reduce using rule 51 (expression -> FALSE .)
    LT              reduce using rule 51 (expression -> FALSE .)
    GE              reduce using rule 51 (expression -> FALSE .)
    LE              reduce using rule 51 (expression -> FALSE .)
    AND             reduce using rule 51 (expression -> FALSE .)
    OR              reduce using rule 51 (expression -> FALSE .)
    NEWLINE         reduce using rule 51 (expression -> FALSE .)
    RBRACKET        reduce using rule 51 (expression -> FALSE .)
    RPAREN          reduce using rule 51 (expression -> FALSE .)


state 45

    (52) expression -> CHAR_CONST .

    COLON           reduce using rule 52 (expression -> CHAR_CONST .)
    PLUS            reduce using rule 52 (expression -> CHAR_CONST .)
    MINUS           reduce using rule 52 (expression -> CHAR_CONST .)
    TIMES           reduce using rule 52 (expression -> CHAR_CONST .)
    DIVIDE          reduce using rule 52 (expression -> CHAR_CONST .)
    EQ              reduce using rule 52 (expression -> CHAR_CONST .)
    GT              reduce using rule 52 (expression -> CHAR_CONST .)
    LT              reduce using rule 52 (expression -> CHAR_CONST .)
    GE              reduce using rule 52 (expression -> CHAR_CONST .)
    LE              reduce using rule 52 (expression -> CHAR_CONST .)
    AND             reduce using rule 52 (expression -> CHAR_CONST .)
    OR              reduce using rule 52 (expression -> CHAR_CONST .)
    NEWLINE         reduce using rule 52 (expression -> CHAR_CONST .)
    RBRACKET        reduce using rule 52 (expression -> CHAR_CONST .)
    RPAREN          reduce using rule 52 (expression -> CHAR_CONST .)


state 46

    (53) expression -> ID .

    COLON           reduce using rule 53 (expression -> ID .)
    PLUS            reduce using rule 53 (expression -> ID .)
    MINUS           reduce using rule 53 (expression -> ID .)
    TIMES           reduce using rule 53 (expression -> ID .)
    DIVIDE          reduce using rule 53 (expression -> ID .)
    EQ              reduce using rule 53 (expression -> ID .)
    GT              reduce using rule 53 (expression -> ID .)
    LT              reduce using rule 53 (expression -> ID .)
    GE              reduce using rule 53 (expression -> ID .)
    LE              reduce using rule 53 (expression -> ID .)
    AND             reduce using rule 53 (expression -> ID .)
    OR              reduce using rule 53 (expression -> ID .)
    NEWLINE         reduce using rule 53 (expression -> ID .)
    RBRACKET        reduce using rule 53 (expression -> ID .)
    RPAREN          reduce using rule 53 (expression -> ID .)


state 47

    (28) while_statement -> WHILE expression . COLON block
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           shift and go to state 72
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 48

    (21) assignment -> declaration EQUALS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    NEWLINE         reduce using rule 21 (assignment -> declaration EQUALS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 49

    (17) var_list -> var_list COMMA . var_decl
    (15) var_decl -> . ID
    (16) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 26
    LBRACKET        shift and go to state 27

    var_decl                       shift and go to state 73

state 50

    (16) var_decl -> LBRACKET expression . RBRACKET ID
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    RBRACKET        shift and go to state 74
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 51

    (53) expression -> ID .
    (19) assignment -> ID . EQUALS expression
    (20) assignment -> ID . LBRACKET expression RBRACKET EQUALS expression
    (22) assignment -> ID . EQUALS assignment

    PLUS            reduce using rule 53 (expression -> ID .)
    MINUS           reduce using rule 53 (expression -> ID .)
    TIMES           reduce using rule 53 (expression -> ID .)
    DIVIDE          reduce using rule 53 (expression -> ID .)
    EQ              reduce using rule 53 (expression -> ID .)
    GT              reduce using rule 53 (expression -> ID .)
    LT              reduce using rule 53 (expression -> ID .)
    GE              reduce using rule 53 (expression -> ID .)
    LE              reduce using rule 53 (expression -> ID .)
    AND             reduce using rule 53 (expression -> ID .)
    OR              reduce using rule 53 (expression -> ID .)
    NEWLINE         reduce using rule 53 (expression -> ID .)
    EQUALS          shift and go to state 31
    LBRACKET        shift and go to state 32


state 52

    (19) assignment -> ID EQUALS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    NEWLINE         reduce using rule 19 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 53

    (22) assignment -> ID EQUALS assignment .

    NEWLINE         reduce using rule 22 (assignment -> ID EQUALS assignment .)


state 54

    (21) assignment -> declaration . EQUALS expression

    EQUALS          shift and go to state 20


state 55

    (20) assignment -> ID LBRACKET expression . RBRACKET EQUALS expression
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    RBRACKET        shift and go to state 75
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 56

    (23) if_statement -> IF expression COLON . block
    (24) if_statement -> IF expression COLON . block newlines ELSE COLON block
    (29) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 77

    block                          shift and go to state 76

state 57

    (30) expression -> expression PLUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 78

state 58

    (31) expression -> expression MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 79

state 59

    (32) expression -> expression TIMES . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 80

state 60

    (33) expression -> expression DIVIDE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 81

state 61

    (34) expression -> expression EQ . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 82

state 62

    (35) expression -> expression GT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 83

state 63

    (36) expression -> expression LT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 84

state 64

    (37) expression -> expression GE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 85

state 65

    (38) expression -> expression LE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 86

state 66

    (39) expression -> expression AND . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 87

state 67

    (40) expression -> expression OR . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 88

state 68

    (43) expression -> PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 43 (expression -> PLUS expression .)
    PLUS            reduce using rule 43 (expression -> PLUS expression .)
    MINUS           reduce using rule 43 (expression -> PLUS expression .)
    EQ              reduce using rule 43 (expression -> PLUS expression .)
    GT              reduce using rule 43 (expression -> PLUS expression .)
    LT              reduce using rule 43 (expression -> PLUS expression .)
    GE              reduce using rule 43 (expression -> PLUS expression .)
    LE              reduce using rule 43 (expression -> PLUS expression .)
    AND             reduce using rule 43 (expression -> PLUS expression .)
    OR              reduce using rule 43 (expression -> PLUS expression .)
    NEWLINE         reduce using rule 43 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 43 (expression -> PLUS expression .)
    RPAREN          reduce using rule 43 (expression -> PLUS expression .)
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! TIMES           [ reduce using rule 43 (expression -> PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 69

    (42) expression -> MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 42 (expression -> MINUS expression .)
    PLUS            reduce using rule 42 (expression -> MINUS expression .)
    MINUS           reduce using rule 42 (expression -> MINUS expression .)
    EQ              reduce using rule 42 (expression -> MINUS expression .)
    GT              reduce using rule 42 (expression -> MINUS expression .)
    LT              reduce using rule 42 (expression -> MINUS expression .)
    GE              reduce using rule 42 (expression -> MINUS expression .)
    LE              reduce using rule 42 (expression -> MINUS expression .)
    AND             reduce using rule 42 (expression -> MINUS expression .)
    OR              reduce using rule 42 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 42 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 42 (expression -> MINUS expression .)
    RPAREN          reduce using rule 42 (expression -> MINUS expression .)
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! TIMES           [ reduce using rule 42 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 70

    (41) expression -> NOT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 41 (expression -> NOT expression .)
    PLUS            reduce using rule 41 (expression -> NOT expression .)
    MINUS           reduce using rule 41 (expression -> NOT expression .)
    TIMES           reduce using rule 41 (expression -> NOT expression .)
    DIVIDE          reduce using rule 41 (expression -> NOT expression .)
    EQ              reduce using rule 41 (expression -> NOT expression .)
    GT              reduce using rule 41 (expression -> NOT expression .)
    LT              reduce using rule 41 (expression -> NOT expression .)
    GE              reduce using rule 41 (expression -> NOT expression .)
    LE              reduce using rule 41 (expression -> NOT expression .)
    AND             reduce using rule 41 (expression -> NOT expression .)
    OR              reduce using rule 41 (expression -> NOT expression .)
    NEWLINE         reduce using rule 41 (expression -> NOT expression .)
    RBRACKET        reduce using rule 41 (expression -> NOT expression .)
    RPAREN          reduce using rule 41 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 59 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 71

    (44) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    RPAREN          shift and go to state 89
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 72

    (28) while_statement -> WHILE expression COLON . block
    (29) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 77

    block                          shift and go to state 90

state 73

    (17) var_list -> var_list COMMA var_decl .

    COMMA           reduce using rule 17 (var_list -> var_list COMMA var_decl .)
    NEWLINE         reduce using rule 17 (var_list -> var_list COMMA var_decl .)
    EQUALS          reduce using rule 17 (var_list -> var_list COMMA var_decl .)


state 74

    (16) var_decl -> LBRACKET expression RBRACKET . ID

    ID              shift and go to state 91


state 75

    (20) assignment -> ID LBRACKET expression RBRACKET . EQUALS expression

    EQUALS          shift and go to state 92


state 76

    (23) if_statement -> IF expression COLON block .
    (24) if_statement -> IF expression COLON block . newlines ELSE COLON block
    (25) newlines -> . NEWLINE
    (26) newlines -> . newlines NEWLINE
    (27) newlines -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    COMMENT         reduce using rule 23 (if_statement -> IF expression COLON block .)
    MLCOMMENT       reduce using rule 23 (if_statement -> IF expression COLON block .)
    INT_TYPE        reduce using rule 23 (if_statement -> IF expression COLON block .)
    FLOAT_TYPE      reduce using rule 23 (if_statement -> IF expression COLON block .)
    CHAR_TYPE       reduce using rule 23 (if_statement -> IF expression COLON block .)
    BOOL_TYPE       reduce using rule 23 (if_statement -> IF expression COLON block .)
    ID              reduce using rule 23 (if_statement -> IF expression COLON block .)
    IF              reduce using rule 23 (if_statement -> IF expression COLON block .)
    WHILE           reduce using rule 23 (if_statement -> IF expression COLON block .)
    $end            reduce using rule 23 (if_statement -> IF expression COLON block .)
    RBRACE          reduce using rule 23 (if_statement -> IF expression COLON block .)
    NEWLINE         shift and go to state 94
    ELSE            reduce using rule 27 (newlines -> .)

  ! NEWLINE         [ reduce using rule 23 (if_statement -> IF expression COLON block .) ]
  ! NEWLINE         [ reduce using rule 27 (newlines -> .) ]

    newlines                       shift and go to state 93

state 77

    (29) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . COMMENT NEWLINE
    (9) statement -> . MLCOMMENT NEWLINE
    (10) statement -> . NEWLINE
    (11) declaration -> . INT_TYPE var_list
    (12) declaration -> . FLOAT_TYPE var_list
    (13) declaration -> . CHAR_TYPE var_list
    (14) declaration -> . BOOL_TYPE var_list
    (19) assignment -> . ID EQUALS expression
    (20) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression
    (21) assignment -> . declaration EQUALS expression
    (22) assignment -> . ID EQUALS assignment
    (23) if_statement -> . IF expression COLON block
    (24) if_statement -> . IF expression COLON block newlines ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block

    COMMENT         shift and go to state 9
    MLCOMMENT       shift and go to state 10
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 11
    FLOAT_TYPE      shift and go to state 12
    CHAR_TYPE       shift and go to state 13
    BOOL_TYPE       shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17

    statement_list                 shift and go to state 95
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8

state 78

    (30) expression -> expression PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 30 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 30 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 30 (expression -> expression PLUS expression .)
    EQ              reduce using rule 30 (expression -> expression PLUS expression .)
    GT              reduce using rule 30 (expression -> expression PLUS expression .)
    LT              reduce using rule 30 (expression -> expression PLUS expression .)
    GE              reduce using rule 30 (expression -> expression PLUS expression .)
    LE              reduce using rule 30 (expression -> expression PLUS expression .)
    AND             reduce using rule 30 (expression -> expression PLUS expression .)
    OR              reduce using rule 30 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 30 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 30 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! TIMES           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 79

    (31) expression -> expression MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 31 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 31 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 31 (expression -> expression MINUS expression .)
    EQ              reduce using rule 31 (expression -> expression MINUS expression .)
    GT              reduce using rule 31 (expression -> expression MINUS expression .)
    LT              reduce using rule 31 (expression -> expression MINUS expression .)
    GE              reduce using rule 31 (expression -> expression MINUS expression .)
    LE              reduce using rule 31 (expression -> expression MINUS expression .)
    AND             reduce using rule 31 (expression -> expression MINUS expression .)
    OR              reduce using rule 31 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 31 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 31 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! TIMES           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 80

    (32) expression -> expression TIMES expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 32 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 32 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 32 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 32 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 32 (expression -> expression TIMES expression .)
    EQ              reduce using rule 32 (expression -> expression TIMES expression .)
    GT              reduce using rule 32 (expression -> expression TIMES expression .)
    LT              reduce using rule 32 (expression -> expression TIMES expression .)
    GE              reduce using rule 32 (expression -> expression TIMES expression .)
    LE              reduce using rule 32 (expression -> expression TIMES expression .)
    AND             reduce using rule 32 (expression -> expression TIMES expression .)
    OR              reduce using rule 32 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 32 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 32 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 32 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 59 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 81

    (33) expression -> expression DIVIDE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 33 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 33 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 33 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 33 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 59 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 82

    (34) expression -> expression EQ expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 34 (expression -> expression EQ expression .)
    EQ              reduce using rule 34 (expression -> expression EQ expression .)
    GT              reduce using rule 34 (expression -> expression EQ expression .)
    LT              reduce using rule 34 (expression -> expression EQ expression .)
    GE              reduce using rule 34 (expression -> expression EQ expression .)
    LE              reduce using rule 34 (expression -> expression EQ expression .)
    AND             reduce using rule 34 (expression -> expression EQ expression .)
    OR              reduce using rule 34 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 34 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 34 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 34 (expression -> expression EQ expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! PLUS            [ reduce using rule 34 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 34 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 83

    (35) expression -> expression GT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 35 (expression -> expression GT expression .)
    EQ              reduce using rule 35 (expression -> expression GT expression .)
    GT              reduce using rule 35 (expression -> expression GT expression .)
    LT              reduce using rule 35 (expression -> expression GT expression .)
    GE              reduce using rule 35 (expression -> expression GT expression .)
    LE              reduce using rule 35 (expression -> expression GT expression .)
    AND             reduce using rule 35 (expression -> expression GT expression .)
    OR              reduce using rule 35 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 35 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 35 (expression -> expression GT expression .)
    RPAREN          reduce using rule 35 (expression -> expression GT expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! PLUS            [ reduce using rule 35 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 84

    (36) expression -> expression LT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 36 (expression -> expression LT expression .)
    EQ              reduce using rule 36 (expression -> expression LT expression .)
    GT              reduce using rule 36 (expression -> expression LT expression .)
    LT              reduce using rule 36 (expression -> expression LT expression .)
    GE              reduce using rule 36 (expression -> expression LT expression .)
    LE              reduce using rule 36 (expression -> expression LT expression .)
    AND             reduce using rule 36 (expression -> expression LT expression .)
    OR              reduce using rule 36 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 36 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 36 (expression -> expression LT expression .)
    RPAREN          reduce using rule 36 (expression -> expression LT expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! PLUS            [ reduce using rule 36 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 85

    (37) expression -> expression GE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 37 (expression -> expression GE expression .)
    EQ              reduce using rule 37 (expression -> expression GE expression .)
    GT              reduce using rule 37 (expression -> expression GE expression .)
    LT              reduce using rule 37 (expression -> expression GE expression .)
    GE              reduce using rule 37 (expression -> expression GE expression .)
    LE              reduce using rule 37 (expression -> expression GE expression .)
    AND             reduce using rule 37 (expression -> expression GE expression .)
    OR              reduce using rule 37 (expression -> expression GE expression .)
    NEWLINE         reduce using rule 37 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 37 (expression -> expression GE expression .)
    RPAREN          reduce using rule 37 (expression -> expression GE expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! PLUS            [ reduce using rule 37 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 86

    (38) expression -> expression LE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 38 (expression -> expression LE expression .)
    EQ              reduce using rule 38 (expression -> expression LE expression .)
    GT              reduce using rule 38 (expression -> expression LE expression .)
    LT              reduce using rule 38 (expression -> expression LE expression .)
    GE              reduce using rule 38 (expression -> expression LE expression .)
    LE              reduce using rule 38 (expression -> expression LE expression .)
    AND             reduce using rule 38 (expression -> expression LE expression .)
    OR              reduce using rule 38 (expression -> expression LE expression .)
    NEWLINE         reduce using rule 38 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 38 (expression -> expression LE expression .)
    RPAREN          reduce using rule 38 (expression -> expression LE expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60

  ! PLUS            [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LT              [ shift and go to state 63 ]
  ! GE              [ shift and go to state 64 ]
  ! LE              [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 87

    (39) expression -> expression AND expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 39 (expression -> expression AND expression .)
    AND             reduce using rule 39 (expression -> expression AND expression .)
    OR              reduce using rule 39 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 39 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 39 (expression -> expression AND expression .)
    RPAREN          reduce using rule 39 (expression -> expression AND expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65

  ! PLUS            [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 88

    (40) expression -> expression OR expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COLON           reduce using rule 40 (expression -> expression OR expression .)
    AND             reduce using rule 40 (expression -> expression OR expression .)
    OR              reduce using rule 40 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 40 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 40 (expression -> expression OR expression .)
    RPAREN          reduce using rule 40 (expression -> expression OR expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65

  ! PLUS            [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 89

    (44) expression -> LPAREN expression RPAREN .

    COLON           reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (expression -> LPAREN expression RPAREN .)


state 90

    (28) while_statement -> WHILE expression COLON block .

    COMMENT         reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    MLCOMMENT       reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    NEWLINE         reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    INT_TYPE        reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    FLOAT_TYPE      reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    CHAR_TYPE       reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    BOOL_TYPE       reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    ID              reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    IF              reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    WHILE           reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    $end            reduce using rule 28 (while_statement -> WHILE expression COLON block .)
    RBRACE          reduce using rule 28 (while_statement -> WHILE expression COLON block .)


state 91

    (16) var_decl -> LBRACKET expression RBRACKET ID .

    COMMA           reduce using rule 16 (var_decl -> LBRACKET expression RBRACKET ID .)
    NEWLINE         reduce using rule 16 (var_decl -> LBRACKET expression RBRACKET ID .)
    EQUALS          reduce using rule 16 (var_decl -> LBRACKET expression RBRACKET ID .)


state 92

    (20) assignment -> ID LBRACKET expression RBRACKET EQUALS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQ expression
    (35) expression -> . expression GT expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GE expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . NOT expression
    (42) expression -> . MINUS expression
    (43) expression -> . PLUS expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . DECIMAL
    (46) expression -> . BINARY
    (47) expression -> . OCTAL
    (48) expression -> . HEXADECIMAL
    (49) expression -> . FLOAT_CONST
    (50) expression -> . TRUE
    (51) expression -> . FALSE
    (52) expression -> . CHAR_CONST
    (53) expression -> . ID

    NOT             shift and go to state 36
    MINUS           shift and go to state 35
    PLUS            shift and go to state 34
    LPAREN          shift and go to state 37
    DECIMAL         shift and go to state 38
    BINARY          shift and go to state 39
    OCTAL           shift and go to state 40
    HEXADECIMAL     shift and go to state 41
    FLOAT_CONST     shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    CHAR_CONST      shift and go to state 45
    ID              shift and go to state 46

    expression                     shift and go to state 96

state 93

    (24) if_statement -> IF expression COLON block newlines . ELSE COLON block
    (26) newlines -> newlines . NEWLINE

    ELSE            shift and go to state 97
    NEWLINE         shift and go to state 98


state 94

    (25) newlines -> NEWLINE .

    ELSE            reduce using rule 25 (newlines -> NEWLINE .)
    NEWLINE         reduce using rule 25 (newlines -> NEWLINE .)


state 95

    (29) block -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . COMMENT NEWLINE
    (9) statement -> . MLCOMMENT NEWLINE
    (10) statement -> . NEWLINE
    (11) declaration -> . INT_TYPE var_list
    (12) declaration -> . FLOAT_TYPE var_list
    (13) declaration -> . CHAR_TYPE var_list
    (14) declaration -> . BOOL_TYPE var_list
    (19) assignment -> . ID EQUALS expression
    (20) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression
    (21) assignment -> . declaration EQUALS expression
    (22) assignment -> . ID EQUALS assignment
    (23) if_statement -> . IF expression COLON block
    (24) if_statement -> . IF expression COLON block newlines ELSE COLON block
    (28) while_statement -> . WHILE expression COLON block

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 9
    MLCOMMENT       shift and go to state 10
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 11
    FLOAT_TYPE      shift and go to state 12
    CHAR_TYPE       shift and go to state 13
    BOOL_TYPE       shift and go to state 14
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17

    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8

state 96

    (20) assignment -> ID LBRACKET expression RBRACKET EQUALS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQ expression
    (35) expression -> expression . GT expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GE expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    NEWLINE         reduce using rule 20 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 59
    DIVIDE          shift and go to state 60
    EQ              shift and go to state 61
    GT              shift and go to state 62
    LT              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 97

    (24) if_statement -> IF expression COLON block newlines ELSE . COLON block

    COLON           shift and go to state 100


state 98

    (26) newlines -> newlines NEWLINE .

    ELSE            reduce using rule 26 (newlines -> newlines NEWLINE .)
    NEWLINE         reduce using rule 26 (newlines -> newlines NEWLINE .)


state 99

    (29) block -> LBRACE statement_list RBRACE .

    NEWLINE         reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    COMMENT         reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    MLCOMMENT       reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    INT_TYPE        reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    FLOAT_TYPE      reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    CHAR_TYPE       reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    BOOL_TYPE       reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 29 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 29 (block -> LBRACE statement_list RBRACE .)


state 100

    (24) if_statement -> IF expression COLON block newlines ELSE COLON . block
    (29) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 77

    block                          shift and go to state 101

state 101

    (24) if_statement -> IF expression COLON block newlines ELSE COLON block .

    COMMENT         reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    MLCOMMENT       reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    NEWLINE         reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    INT_TYPE        reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    FLOAT_TYPE      reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    CHAR_TYPE       reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    BOOL_TYPE       reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    ID              reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    IF              reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    WHILE           reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    $end            reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)
    RBRACE          reduce using rule 24 (if_statement -> IF expression COLON block newlines ELSE COLON block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 76 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 76 resolved as shift
