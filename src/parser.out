Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement_list -> statement
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> if_statement
Rule 8     statement -> TYPE register
Rule 9     statement -> while_statement
Rule 10    statement -> COMMENT NEWLINE
Rule 11    statement -> MLCOMMENT NEWLINE
Rule 12    statement -> funct_decl
Rule 13    statement -> NEWLINE
Rule 14    declaration -> INT_TYPE var_list
Rule 15    declaration -> FLOAT_TYPE var_list
Rule 16    declaration -> CHAR_TYPE var_list
Rule 17    declaration -> BOOL_TYPE var_list
Rule 18    declaration -> ID ID
Rule 19    register -> ID COLON block
Rule 20    var_decl -> ID
Rule 21    var_decl -> LBRACKET expression RBRACKET ID
Rule 22    var_list -> var_list COMMA var_decl
Rule 23    var_list -> var_decl
Rule 24    assignment -> ID EQUALS expression
Rule 25    assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression
Rule 26    assignment -> ID LBRACKET ID RBRACKET EQUALS expression
Rule 27    assignment -> declaration EQUALS expression
Rule 28    assignment -> ID EQUALS assignment
Rule 29    assignment -> ID DOT unique_assignment
Rule 30    unique_assignment -> ID EQUALS expression
Rule 31    unique_assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression
Rule 32    unique_assignment -> ID LBRACKET ID RBRACKET EQUALS expression
Rule 33    funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct
Rule 34    type_funct -> INT_TYPE
Rule 35    type_funct -> FLOAT_TYPE
Rule 36    type_funct -> BOOL_TYPE
Rule 37    type_funct -> ID
Rule 38    arg_funct -> type_funct ID extra another
Rule 39    extra -> COMMA ID extra
Rule 40    extra -> <empty>
Rule 41    another -> SEMICOLON arg_funct
Rule 42    another -> <empty>
Rule 43    block_funct -> LBRACE statement_list funct_ret RBRACE
Rule 44    funct_ret -> RETURN ID newlines
Rule 45    newlines -> NEWLINE
Rule 46    newlines -> <empty>
Rule 47    if_statement -> IF expression COLON block else
Rule 48    else -> NEWLINE ELSE COLON block
Rule 49    else -> NEWLINE
Rule 50    while_statement -> WHILE expression COLON block
Rule 51    block -> LBRACE statement_list RBRACE
Rule 52    expression -> expression PLUS expression
Rule 53    expression -> expression MINUS expression
Rule 54    expression -> expression TIMES expression
Rule 55    expression -> expression DIVIDE expression
Rule 56    expression -> expression EQ expression
Rule 57    expression -> expression GT expression
Rule 58    expression -> expression LT expression
Rule 59    expression -> expression GE expression
Rule 60    expression -> expression LE expression
Rule 61    expression -> expression AND expression
Rule 62    expression -> expression OR expression
Rule 63    expression -> NOT expression
Rule 64    expression -> MINUS expression
Rule 65    expression -> PLUS expression
Rule 66    expression -> LPAREN expression RPAREN
Rule 67    expression -> DECIMAL
Rule 68    expression -> BINARY
Rule 69    expression -> OCTAL
Rule 70    expression -> HEXADECIMAL
Rule 71    expression -> FLOAT_CONST
Rule 72    expression -> TRUE
Rule 73    expression -> FALSE
Rule 74    expression -> CHAR_CONST
Rule 75    expression -> ID

Terminals, with rules where they appear

AND                  : 61
BINARY               : 68
BOOL_TYPE            : 17 36
CHAR_CONST           : 74
CHAR_TYPE            : 16
COLON                : 19 33 47 48 50
COMMA                : 22 39
COMMENT              : 10
DECIMAL              : 25 31 67
DEF                  : 33
DIVIDE               : 55
DOT                  : 29
ELSE                 : 48
EQ                   : 56
EQUALS               : 24 25 26 27 28 30 31 32
FALSE                : 73
FLOAT_CONST          : 71
FLOAT_TYPE           : 15 35
GE                   : 59
GT                   : 57
HEXADECIMAL          : 70
ID                   : 18 18 19 20 21 24 25 26 26 28 29 30 31 32 32 33 37 38 39 44 75
IF                   : 47
INT_TYPE             : 14 34
LBRACE               : 43 51
LBRACKET             : 21 25 26 31 32
LE                   : 60
LPAREN               : 33 66
LT                   : 58
MINUS                : 53 64
MLCOMMENT            : 11
NEWLINE              : 5 6 10 11 13 45 48 49
NOT                  : 63
OCTAL                : 69
OR                   : 62
PLUS                 : 52 65
RBRACE               : 43 51
RBRACKET             : 21 25 26 31 32
RETURN               : 44
RPAREN               : 33 66
SEMICOLON            : 41
TIMES                : 54
TRUE                 : 72
TYPE                 : 8
WHILE                : 50
error                : 

Nonterminals, with rules where they appear

another              : 38
arg_funct            : 33 41
assignment           : 6 28
block                : 19 47 48 50
block_funct          : 33
declaration          : 5 27
else                 : 47
expression           : 21 24 25 26 27 30 31 32 47 50 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 64 65 66
extra                : 38 39
funct_decl           : 12
funct_ret            : 43
if_statement         : 7
newlines             : 44
program              : 0
register             : 8
statement            : 3 4
statement_list       : 1 3 43 51
type_funct           : 33 38
unique_assignment    : 29
var_decl             : 22 23
var_list             : 14 15 16 17 22
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> .
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    $end            reduce using rule 2 (program -> .)
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    $end            reduce using rule 1 (program -> statement_list .)
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement                      shift and go to state 21
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 3

    (4) statement_list -> statement .

    TYPE            reduce using rule 4 (statement_list -> statement .)
    COMMENT         reduce using rule 4 (statement_list -> statement .)
    MLCOMMENT       reduce using rule 4 (statement_list -> statement .)
    NEWLINE         reduce using rule 4 (statement_list -> statement .)
    INT_TYPE        reduce using rule 4 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 4 (statement_list -> statement .)
    CHAR_TYPE       reduce using rule 4 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 4 (statement_list -> statement .)
    ID              reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    DEF             reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 4

    (5) statement -> declaration . NEWLINE
    (27) assignment -> declaration . EQUALS expression

    NEWLINE         shift and go to state 22
    EQUALS          shift and go to state 23


state 5

    (13) statement -> NEWLINE .

    TYPE            reduce using rule 13 (statement -> NEWLINE .)
    COMMENT         reduce using rule 13 (statement -> NEWLINE .)
    MLCOMMENT       reduce using rule 13 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> NEWLINE .)
    INT_TYPE        reduce using rule 13 (statement -> NEWLINE .)
    FLOAT_TYPE      reduce using rule 13 (statement -> NEWLINE .)
    CHAR_TYPE       reduce using rule 13 (statement -> NEWLINE .)
    BOOL_TYPE       reduce using rule 13 (statement -> NEWLINE .)
    ID              reduce using rule 13 (statement -> NEWLINE .)
    IF              reduce using rule 13 (statement -> NEWLINE .)
    WHILE           reduce using rule 13 (statement -> NEWLINE .)
    DEF             reduce using rule 13 (statement -> NEWLINE .)
    $end            reduce using rule 13 (statement -> NEWLINE .)
    RBRACE          reduce using rule 13 (statement -> NEWLINE .)
    RETURN          reduce using rule 13 (statement -> NEWLINE .)


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 24


state 7

    (7) statement -> if_statement .

    TYPE            reduce using rule 7 (statement -> if_statement .)
    COMMENT         reduce using rule 7 (statement -> if_statement .)
    MLCOMMENT       reduce using rule 7 (statement -> if_statement .)
    NEWLINE         reduce using rule 7 (statement -> if_statement .)
    INT_TYPE        reduce using rule 7 (statement -> if_statement .)
    FLOAT_TYPE      reduce using rule 7 (statement -> if_statement .)
    CHAR_TYPE       reduce using rule 7 (statement -> if_statement .)
    BOOL_TYPE       reduce using rule 7 (statement -> if_statement .)
    ID              reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    DEF             reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACE          reduce using rule 7 (statement -> if_statement .)
    RETURN          reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> TYPE . register
    (19) register -> . ID COLON block

    ID              shift and go to state 26

    register                       shift and go to state 25

state 9

    (9) statement -> while_statement .

    TYPE            reduce using rule 9 (statement -> while_statement .)
    COMMENT         reduce using rule 9 (statement -> while_statement .)
    MLCOMMENT       reduce using rule 9 (statement -> while_statement .)
    NEWLINE         reduce using rule 9 (statement -> while_statement .)
    INT_TYPE        reduce using rule 9 (statement -> while_statement .)
    FLOAT_TYPE      reduce using rule 9 (statement -> while_statement .)
    CHAR_TYPE       reduce using rule 9 (statement -> while_statement .)
    BOOL_TYPE       reduce using rule 9 (statement -> while_statement .)
    ID              reduce using rule 9 (statement -> while_statement .)
    IF              reduce using rule 9 (statement -> while_statement .)
    WHILE           reduce using rule 9 (statement -> while_statement .)
    DEF             reduce using rule 9 (statement -> while_statement .)
    $end            reduce using rule 9 (statement -> while_statement .)
    RBRACE          reduce using rule 9 (statement -> while_statement .)
    RETURN          reduce using rule 9 (statement -> while_statement .)


state 10

    (10) statement -> COMMENT . NEWLINE

    NEWLINE         shift and go to state 27


state 11

    (11) statement -> MLCOMMENT . NEWLINE

    NEWLINE         shift and go to state 28


state 12

    (12) statement -> funct_decl .

    TYPE            reduce using rule 12 (statement -> funct_decl .)
    COMMENT         reduce using rule 12 (statement -> funct_decl .)
    MLCOMMENT       reduce using rule 12 (statement -> funct_decl .)
    NEWLINE         reduce using rule 12 (statement -> funct_decl .)
    INT_TYPE        reduce using rule 12 (statement -> funct_decl .)
    FLOAT_TYPE      reduce using rule 12 (statement -> funct_decl .)
    CHAR_TYPE       reduce using rule 12 (statement -> funct_decl .)
    BOOL_TYPE       reduce using rule 12 (statement -> funct_decl .)
    ID              reduce using rule 12 (statement -> funct_decl .)
    IF              reduce using rule 12 (statement -> funct_decl .)
    WHILE           reduce using rule 12 (statement -> funct_decl .)
    DEF             reduce using rule 12 (statement -> funct_decl .)
    $end            reduce using rule 12 (statement -> funct_decl .)
    RBRACE          reduce using rule 12 (statement -> funct_decl .)
    RETURN          reduce using rule 12 (statement -> funct_decl .)


state 13

    (14) declaration -> INT_TYPE . var_list
    (22) var_list -> . var_list COMMA var_decl
    (23) var_list -> . var_decl
    (20) var_decl -> . ID
    (21) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 29
    var_decl                       shift and go to state 30

state 14

    (15) declaration -> FLOAT_TYPE . var_list
    (22) var_list -> . var_list COMMA var_decl
    (23) var_list -> . var_decl
    (20) var_decl -> . ID
    (21) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 33
    var_decl                       shift and go to state 30

state 15

    (16) declaration -> CHAR_TYPE . var_list
    (22) var_list -> . var_list COMMA var_decl
    (23) var_list -> . var_decl
    (20) var_decl -> . ID
    (21) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 34
    var_decl                       shift and go to state 30

state 16

    (17) declaration -> BOOL_TYPE . var_list
    (22) var_list -> . var_list COMMA var_decl
    (23) var_list -> . var_decl
    (20) var_decl -> . ID
    (21) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 35
    var_decl                       shift and go to state 30

state 17

    (18) declaration -> ID . ID
    (24) assignment -> ID . EQUALS expression
    (25) assignment -> ID . LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> ID . LBRACKET ID RBRACKET EQUALS expression
    (28) assignment -> ID . EQUALS assignment
    (29) assignment -> ID . DOT unique_assignment

    ID              shift and go to state 36
    EQUALS          shift and go to state 37
    LBRACKET        shift and go to state 38
    DOT             shift and go to state 39


state 18

    (47) if_statement -> IF . expression COLON block else
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 40

state 19

    (50) while_statement -> WHILE . expression COLON block
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 54

state 20

    (33) funct_decl -> DEF . type_funct ID LPAREN arg_funct RPAREN COLON block_funct
    (34) type_funct -> . INT_TYPE
    (35) type_funct -> . FLOAT_TYPE
    (36) type_funct -> . BOOL_TYPE
    (37) type_funct -> . ID

    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    BOOL_TYPE       shift and go to state 59
    ID              shift and go to state 56

    type_funct                     shift and go to state 55

state 21

    (3) statement_list -> statement_list statement .

    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement_list statement .)
    MLCOMMENT       reduce using rule 3 (statement_list -> statement_list statement .)
    NEWLINE         reduce using rule 3 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 3 (statement_list -> statement_list statement .)
    CHAR_TYPE       reduce using rule 3 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)


state 22

    (5) statement -> declaration NEWLINE .

    TYPE            reduce using rule 5 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 5 (statement -> declaration NEWLINE .)
    MLCOMMENT       reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    INT_TYPE        reduce using rule 5 (statement -> declaration NEWLINE .)
    FLOAT_TYPE      reduce using rule 5 (statement -> declaration NEWLINE .)
    CHAR_TYPE       reduce using rule 5 (statement -> declaration NEWLINE .)
    BOOL_TYPE       reduce using rule 5 (statement -> declaration NEWLINE .)
    ID              reduce using rule 5 (statement -> declaration NEWLINE .)
    IF              reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    DEF             reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    RBRACE          reduce using rule 5 (statement -> declaration NEWLINE .)
    RETURN          reduce using rule 5 (statement -> declaration NEWLINE .)


state 23

    (27) assignment -> declaration EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 60

state 24

    (6) statement -> assignment NEWLINE .

    TYPE            reduce using rule 6 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 6 (statement -> assignment NEWLINE .)
    MLCOMMENT       reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    INT_TYPE        reduce using rule 6 (statement -> assignment NEWLINE .)
    FLOAT_TYPE      reduce using rule 6 (statement -> assignment NEWLINE .)
    CHAR_TYPE       reduce using rule 6 (statement -> assignment NEWLINE .)
    BOOL_TYPE       reduce using rule 6 (statement -> assignment NEWLINE .)
    ID              reduce using rule 6 (statement -> assignment NEWLINE .)
    IF              reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    DEF             reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    RBRACE          reduce using rule 6 (statement -> assignment NEWLINE .)
    RETURN          reduce using rule 6 (statement -> assignment NEWLINE .)


state 25

    (8) statement -> TYPE register .

    TYPE            reduce using rule 8 (statement -> TYPE register .)
    COMMENT         reduce using rule 8 (statement -> TYPE register .)
    MLCOMMENT       reduce using rule 8 (statement -> TYPE register .)
    NEWLINE         reduce using rule 8 (statement -> TYPE register .)
    INT_TYPE        reduce using rule 8 (statement -> TYPE register .)
    FLOAT_TYPE      reduce using rule 8 (statement -> TYPE register .)
    CHAR_TYPE       reduce using rule 8 (statement -> TYPE register .)
    BOOL_TYPE       reduce using rule 8 (statement -> TYPE register .)
    ID              reduce using rule 8 (statement -> TYPE register .)
    IF              reduce using rule 8 (statement -> TYPE register .)
    WHILE           reduce using rule 8 (statement -> TYPE register .)
    DEF             reduce using rule 8 (statement -> TYPE register .)
    $end            reduce using rule 8 (statement -> TYPE register .)
    RBRACE          reduce using rule 8 (statement -> TYPE register .)
    RETURN          reduce using rule 8 (statement -> TYPE register .)


state 26

    (19) register -> ID . COLON block

    COLON           shift and go to state 61


state 27

    (10) statement -> COMMENT NEWLINE .

    TYPE            reduce using rule 10 (statement -> COMMENT NEWLINE .)
    COMMENT         reduce using rule 10 (statement -> COMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> COMMENT NEWLINE .)
    INT_TYPE        reduce using rule 10 (statement -> COMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 10 (statement -> COMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    ID              reduce using rule 10 (statement -> COMMENT NEWLINE .)
    IF              reduce using rule 10 (statement -> COMMENT NEWLINE .)
    WHILE           reduce using rule 10 (statement -> COMMENT NEWLINE .)
    DEF             reduce using rule 10 (statement -> COMMENT NEWLINE .)
    $end            reduce using rule 10 (statement -> COMMENT NEWLINE .)
    RBRACE          reduce using rule 10 (statement -> COMMENT NEWLINE .)
    RETURN          reduce using rule 10 (statement -> COMMENT NEWLINE .)


state 28

    (11) statement -> MLCOMMENT NEWLINE .

    TYPE            reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    COMMENT         reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    INT_TYPE        reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    ID              reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    IF              reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    WHILE           reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    DEF             reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    $end            reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    RBRACE          reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    RETURN          reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)


state 29

    (14) declaration -> INT_TYPE var_list .
    (22) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 14 (declaration -> INT_TYPE var_list .)
    EQUALS          reduce using rule 14 (declaration -> INT_TYPE var_list .)
    COMMA           shift and go to state 62


state 30

    (23) var_list -> var_decl .

    COMMA           reduce using rule 23 (var_list -> var_decl .)
    NEWLINE         reduce using rule 23 (var_list -> var_decl .)
    EQUALS          reduce using rule 23 (var_list -> var_decl .)


state 31

    (20) var_decl -> ID .

    COMMA           reduce using rule 20 (var_decl -> ID .)
    NEWLINE         reduce using rule 20 (var_decl -> ID .)
    EQUALS          reduce using rule 20 (var_decl -> ID .)


state 32

    (21) var_decl -> LBRACKET . expression RBRACKET ID
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 63

state 33

    (15) declaration -> FLOAT_TYPE var_list .
    (22) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 15 (declaration -> FLOAT_TYPE var_list .)
    EQUALS          reduce using rule 15 (declaration -> FLOAT_TYPE var_list .)
    COMMA           shift and go to state 62


state 34

    (16) declaration -> CHAR_TYPE var_list .
    (22) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 16 (declaration -> CHAR_TYPE var_list .)
    EQUALS          reduce using rule 16 (declaration -> CHAR_TYPE var_list .)
    COMMA           shift and go to state 62


state 35

    (17) declaration -> BOOL_TYPE var_list .
    (22) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 17 (declaration -> BOOL_TYPE var_list .)
    EQUALS          reduce using rule 17 (declaration -> BOOL_TYPE var_list .)
    COMMA           shift and go to state 62


state 36

    (18) declaration -> ID ID .

    NEWLINE         reduce using rule 18 (declaration -> ID ID .)
    EQUALS          reduce using rule 18 (declaration -> ID ID .)


state 37

    (24) assignment -> ID EQUALS . expression
    (28) assignment -> ID EQUALS . assignment
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 64
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16

    expression                     shift and go to state 65
    assignment                     shift and go to state 66
    declaration                    shift and go to state 67

state 38

    (25) assignment -> ID LBRACKET . DECIMAL RBRACKET EQUALS expression
    (26) assignment -> ID LBRACKET . ID RBRACKET EQUALS expression

    DECIMAL         shift and go to state 69
    ID              shift and go to state 68


state 39

    (29) assignment -> ID DOT . unique_assignment
    (30) unique_assignment -> . ID EQUALS expression
    (31) unique_assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (32) unique_assignment -> . ID LBRACKET ID RBRACKET EQUALS expression

    ID              shift and go to state 70

    unique_assignment              shift and go to state 71

state 40

    (47) if_statement -> IF expression . COLON block else
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 41

    (65) expression -> PLUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 84

state 42

    (64) expression -> MINUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 85

state 43

    (63) expression -> NOT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 86

state 44

    (66) expression -> LPAREN . expression RPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 87

state 45

    (67) expression -> DECIMAL .

    COLON           reduce using rule 67 (expression -> DECIMAL .)
    PLUS            reduce using rule 67 (expression -> DECIMAL .)
    MINUS           reduce using rule 67 (expression -> DECIMAL .)
    TIMES           reduce using rule 67 (expression -> DECIMAL .)
    DIVIDE          reduce using rule 67 (expression -> DECIMAL .)
    EQ              reduce using rule 67 (expression -> DECIMAL .)
    GT              reduce using rule 67 (expression -> DECIMAL .)
    LT              reduce using rule 67 (expression -> DECIMAL .)
    GE              reduce using rule 67 (expression -> DECIMAL .)
    LE              reduce using rule 67 (expression -> DECIMAL .)
    AND             reduce using rule 67 (expression -> DECIMAL .)
    OR              reduce using rule 67 (expression -> DECIMAL .)
    NEWLINE         reduce using rule 67 (expression -> DECIMAL .)
    RBRACKET        reduce using rule 67 (expression -> DECIMAL .)
    RPAREN          reduce using rule 67 (expression -> DECIMAL .)


state 46

    (68) expression -> BINARY .

    COLON           reduce using rule 68 (expression -> BINARY .)
    PLUS            reduce using rule 68 (expression -> BINARY .)
    MINUS           reduce using rule 68 (expression -> BINARY .)
    TIMES           reduce using rule 68 (expression -> BINARY .)
    DIVIDE          reduce using rule 68 (expression -> BINARY .)
    EQ              reduce using rule 68 (expression -> BINARY .)
    GT              reduce using rule 68 (expression -> BINARY .)
    LT              reduce using rule 68 (expression -> BINARY .)
    GE              reduce using rule 68 (expression -> BINARY .)
    LE              reduce using rule 68 (expression -> BINARY .)
    AND             reduce using rule 68 (expression -> BINARY .)
    OR              reduce using rule 68 (expression -> BINARY .)
    NEWLINE         reduce using rule 68 (expression -> BINARY .)
    RBRACKET        reduce using rule 68 (expression -> BINARY .)
    RPAREN          reduce using rule 68 (expression -> BINARY .)


state 47

    (69) expression -> OCTAL .

    COLON           reduce using rule 69 (expression -> OCTAL .)
    PLUS            reduce using rule 69 (expression -> OCTAL .)
    MINUS           reduce using rule 69 (expression -> OCTAL .)
    TIMES           reduce using rule 69 (expression -> OCTAL .)
    DIVIDE          reduce using rule 69 (expression -> OCTAL .)
    EQ              reduce using rule 69 (expression -> OCTAL .)
    GT              reduce using rule 69 (expression -> OCTAL .)
    LT              reduce using rule 69 (expression -> OCTAL .)
    GE              reduce using rule 69 (expression -> OCTAL .)
    LE              reduce using rule 69 (expression -> OCTAL .)
    AND             reduce using rule 69 (expression -> OCTAL .)
    OR              reduce using rule 69 (expression -> OCTAL .)
    NEWLINE         reduce using rule 69 (expression -> OCTAL .)
    RBRACKET        reduce using rule 69 (expression -> OCTAL .)
    RPAREN          reduce using rule 69 (expression -> OCTAL .)


state 48

    (70) expression -> HEXADECIMAL .

    COLON           reduce using rule 70 (expression -> HEXADECIMAL .)
    PLUS            reduce using rule 70 (expression -> HEXADECIMAL .)
    MINUS           reduce using rule 70 (expression -> HEXADECIMAL .)
    TIMES           reduce using rule 70 (expression -> HEXADECIMAL .)
    DIVIDE          reduce using rule 70 (expression -> HEXADECIMAL .)
    EQ              reduce using rule 70 (expression -> HEXADECIMAL .)
    GT              reduce using rule 70 (expression -> HEXADECIMAL .)
    LT              reduce using rule 70 (expression -> HEXADECIMAL .)
    GE              reduce using rule 70 (expression -> HEXADECIMAL .)
    LE              reduce using rule 70 (expression -> HEXADECIMAL .)
    AND             reduce using rule 70 (expression -> HEXADECIMAL .)
    OR              reduce using rule 70 (expression -> HEXADECIMAL .)
    NEWLINE         reduce using rule 70 (expression -> HEXADECIMAL .)
    RBRACKET        reduce using rule 70 (expression -> HEXADECIMAL .)
    RPAREN          reduce using rule 70 (expression -> HEXADECIMAL .)


state 49

    (71) expression -> FLOAT_CONST .

    COLON           reduce using rule 71 (expression -> FLOAT_CONST .)
    PLUS            reduce using rule 71 (expression -> FLOAT_CONST .)
    MINUS           reduce using rule 71 (expression -> FLOAT_CONST .)
    TIMES           reduce using rule 71 (expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 71 (expression -> FLOAT_CONST .)
    EQ              reduce using rule 71 (expression -> FLOAT_CONST .)
    GT              reduce using rule 71 (expression -> FLOAT_CONST .)
    LT              reduce using rule 71 (expression -> FLOAT_CONST .)
    GE              reduce using rule 71 (expression -> FLOAT_CONST .)
    LE              reduce using rule 71 (expression -> FLOAT_CONST .)
    AND             reduce using rule 71 (expression -> FLOAT_CONST .)
    OR              reduce using rule 71 (expression -> FLOAT_CONST .)
    NEWLINE         reduce using rule 71 (expression -> FLOAT_CONST .)
    RBRACKET        reduce using rule 71 (expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 71 (expression -> FLOAT_CONST .)


state 50

    (72) expression -> TRUE .

    COLON           reduce using rule 72 (expression -> TRUE .)
    PLUS            reduce using rule 72 (expression -> TRUE .)
    MINUS           reduce using rule 72 (expression -> TRUE .)
    TIMES           reduce using rule 72 (expression -> TRUE .)
    DIVIDE          reduce using rule 72 (expression -> TRUE .)
    EQ              reduce using rule 72 (expression -> TRUE .)
    GT              reduce using rule 72 (expression -> TRUE .)
    LT              reduce using rule 72 (expression -> TRUE .)
    GE              reduce using rule 72 (expression -> TRUE .)
    LE              reduce using rule 72 (expression -> TRUE .)
    AND             reduce using rule 72 (expression -> TRUE .)
    OR              reduce using rule 72 (expression -> TRUE .)
    NEWLINE         reduce using rule 72 (expression -> TRUE .)
    RBRACKET        reduce using rule 72 (expression -> TRUE .)
    RPAREN          reduce using rule 72 (expression -> TRUE .)


state 51

    (73) expression -> FALSE .

    COLON           reduce using rule 73 (expression -> FALSE .)
    PLUS            reduce using rule 73 (expression -> FALSE .)
    MINUS           reduce using rule 73 (expression -> FALSE .)
    TIMES           reduce using rule 73 (expression -> FALSE .)
    DIVIDE          reduce using rule 73 (expression -> FALSE .)
    EQ              reduce using rule 73 (expression -> FALSE .)
    GT              reduce using rule 73 (expression -> FALSE .)
    LT              reduce using rule 73 (expression -> FALSE .)
    GE              reduce using rule 73 (expression -> FALSE .)
    LE              reduce using rule 73 (expression -> FALSE .)
    AND             reduce using rule 73 (expression -> FALSE .)
    OR              reduce using rule 73 (expression -> FALSE .)
    NEWLINE         reduce using rule 73 (expression -> FALSE .)
    RBRACKET        reduce using rule 73 (expression -> FALSE .)
    RPAREN          reduce using rule 73 (expression -> FALSE .)


state 52

    (74) expression -> CHAR_CONST .

    COLON           reduce using rule 74 (expression -> CHAR_CONST .)
    PLUS            reduce using rule 74 (expression -> CHAR_CONST .)
    MINUS           reduce using rule 74 (expression -> CHAR_CONST .)
    TIMES           reduce using rule 74 (expression -> CHAR_CONST .)
    DIVIDE          reduce using rule 74 (expression -> CHAR_CONST .)
    EQ              reduce using rule 74 (expression -> CHAR_CONST .)
    GT              reduce using rule 74 (expression -> CHAR_CONST .)
    LT              reduce using rule 74 (expression -> CHAR_CONST .)
    GE              reduce using rule 74 (expression -> CHAR_CONST .)
    LE              reduce using rule 74 (expression -> CHAR_CONST .)
    AND             reduce using rule 74 (expression -> CHAR_CONST .)
    OR              reduce using rule 74 (expression -> CHAR_CONST .)
    NEWLINE         reduce using rule 74 (expression -> CHAR_CONST .)
    RBRACKET        reduce using rule 74 (expression -> CHAR_CONST .)
    RPAREN          reduce using rule 74 (expression -> CHAR_CONST .)


state 53

    (75) expression -> ID .

    COLON           reduce using rule 75 (expression -> ID .)
    PLUS            reduce using rule 75 (expression -> ID .)
    MINUS           reduce using rule 75 (expression -> ID .)
    TIMES           reduce using rule 75 (expression -> ID .)
    DIVIDE          reduce using rule 75 (expression -> ID .)
    EQ              reduce using rule 75 (expression -> ID .)
    GT              reduce using rule 75 (expression -> ID .)
    LT              reduce using rule 75 (expression -> ID .)
    GE              reduce using rule 75 (expression -> ID .)
    LE              reduce using rule 75 (expression -> ID .)
    AND             reduce using rule 75 (expression -> ID .)
    OR              reduce using rule 75 (expression -> ID .)
    NEWLINE         reduce using rule 75 (expression -> ID .)
    RBRACKET        reduce using rule 75 (expression -> ID .)
    RPAREN          reduce using rule 75 (expression -> ID .)


state 54

    (50) while_statement -> WHILE expression . COLON block
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           shift and go to state 88
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 55

    (33) funct_decl -> DEF type_funct . ID LPAREN arg_funct RPAREN COLON block_funct

    ID              shift and go to state 89


state 56

    (37) type_funct -> ID .

    ID              reduce using rule 37 (type_funct -> ID .)


state 57

    (34) type_funct -> INT_TYPE .

    ID              reduce using rule 34 (type_funct -> INT_TYPE .)


state 58

    (35) type_funct -> FLOAT_TYPE .

    ID              reduce using rule 35 (type_funct -> FLOAT_TYPE .)


state 59

    (36) type_funct -> BOOL_TYPE .

    ID              reduce using rule 36 (type_funct -> BOOL_TYPE .)


state 60

    (27) assignment -> declaration EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 27 (assignment -> declaration EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 61

    (19) register -> ID COLON . block
    (51) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 91

    block                          shift and go to state 90

state 62

    (22) var_list -> var_list COMMA . var_decl
    (20) var_decl -> . ID
    (21) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_decl                       shift and go to state 92

state 63

    (21) var_decl -> LBRACKET expression . RBRACKET ID
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    RBRACKET        shift and go to state 93
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 64

    (75) expression -> ID .
    (24) assignment -> ID . EQUALS expression
    (25) assignment -> ID . LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> ID . LBRACKET ID RBRACKET EQUALS expression
    (28) assignment -> ID . EQUALS assignment
    (29) assignment -> ID . DOT unique_assignment
    (18) declaration -> ID . ID

    PLUS            reduce using rule 75 (expression -> ID .)
    MINUS           reduce using rule 75 (expression -> ID .)
    TIMES           reduce using rule 75 (expression -> ID .)
    DIVIDE          reduce using rule 75 (expression -> ID .)
    EQ              reduce using rule 75 (expression -> ID .)
    GT              reduce using rule 75 (expression -> ID .)
    LT              reduce using rule 75 (expression -> ID .)
    GE              reduce using rule 75 (expression -> ID .)
    LE              reduce using rule 75 (expression -> ID .)
    AND             reduce using rule 75 (expression -> ID .)
    OR              reduce using rule 75 (expression -> ID .)
    NEWLINE         reduce using rule 75 (expression -> ID .)
    EQUALS          shift and go to state 37
    LBRACKET        shift and go to state 38
    DOT             shift and go to state 39
    ID              shift and go to state 36


state 65

    (24) assignment -> ID EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 24 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 66

    (28) assignment -> ID EQUALS assignment .

    NEWLINE         reduce using rule 28 (assignment -> ID EQUALS assignment .)


state 67

    (27) assignment -> declaration . EQUALS expression

    EQUALS          shift and go to state 23


state 68

    (26) assignment -> ID LBRACKET ID . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 94


state 69

    (25) assignment -> ID LBRACKET DECIMAL . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 95


state 70

    (30) unique_assignment -> ID . EQUALS expression
    (31) unique_assignment -> ID . LBRACKET DECIMAL RBRACKET EQUALS expression
    (32) unique_assignment -> ID . LBRACKET ID RBRACKET EQUALS expression

    EQUALS          shift and go to state 96
    LBRACKET        shift and go to state 97


state 71

    (29) assignment -> ID DOT unique_assignment .

    NEWLINE         reduce using rule 29 (assignment -> ID DOT unique_assignment .)


state 72

    (47) if_statement -> IF expression COLON . block else
    (51) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 91

    block                          shift and go to state 98

state 73

    (52) expression -> expression PLUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 99

state 74

    (53) expression -> expression MINUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 100

state 75

    (54) expression -> expression TIMES . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 101

state 76

    (55) expression -> expression DIVIDE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 102

state 77

    (56) expression -> expression EQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 103

state 78

    (57) expression -> expression GT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 104

state 79

    (58) expression -> expression LT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 105

state 80

    (59) expression -> expression GE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 106

state 81

    (60) expression -> expression LE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 107

state 82

    (61) expression -> expression AND . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 108

state 83

    (62) expression -> expression OR . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 109

state 84

    (65) expression -> PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 65 (expression -> PLUS expression .)
    PLUS            reduce using rule 65 (expression -> PLUS expression .)
    MINUS           reduce using rule 65 (expression -> PLUS expression .)
    EQ              reduce using rule 65 (expression -> PLUS expression .)
    GT              reduce using rule 65 (expression -> PLUS expression .)
    LT              reduce using rule 65 (expression -> PLUS expression .)
    GE              reduce using rule 65 (expression -> PLUS expression .)
    LE              reduce using rule 65 (expression -> PLUS expression .)
    AND             reduce using rule 65 (expression -> PLUS expression .)
    OR              reduce using rule 65 (expression -> PLUS expression .)
    NEWLINE         reduce using rule 65 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 65 (expression -> PLUS expression .)
    RPAREN          reduce using rule 65 (expression -> PLUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 65 (expression -> PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 85

    (64) expression -> MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 64 (expression -> MINUS expression .)
    PLUS            reduce using rule 64 (expression -> MINUS expression .)
    MINUS           reduce using rule 64 (expression -> MINUS expression .)
    EQ              reduce using rule 64 (expression -> MINUS expression .)
    GT              reduce using rule 64 (expression -> MINUS expression .)
    LT              reduce using rule 64 (expression -> MINUS expression .)
    GE              reduce using rule 64 (expression -> MINUS expression .)
    LE              reduce using rule 64 (expression -> MINUS expression .)
    AND             reduce using rule 64 (expression -> MINUS expression .)
    OR              reduce using rule 64 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 64 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 64 (expression -> MINUS expression .)
    RPAREN          reduce using rule 64 (expression -> MINUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 64 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 86

    (63) expression -> NOT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 63 (expression -> NOT expression .)
    PLUS            reduce using rule 63 (expression -> NOT expression .)
    MINUS           reduce using rule 63 (expression -> NOT expression .)
    TIMES           reduce using rule 63 (expression -> NOT expression .)
    DIVIDE          reduce using rule 63 (expression -> NOT expression .)
    EQ              reduce using rule 63 (expression -> NOT expression .)
    GT              reduce using rule 63 (expression -> NOT expression .)
    LT              reduce using rule 63 (expression -> NOT expression .)
    GE              reduce using rule 63 (expression -> NOT expression .)
    LE              reduce using rule 63 (expression -> NOT expression .)
    AND             reduce using rule 63 (expression -> NOT expression .)
    OR              reduce using rule 63 (expression -> NOT expression .)
    NEWLINE         reduce using rule 63 (expression -> NOT expression .)
    RBRACKET        reduce using rule 63 (expression -> NOT expression .)
    RPAREN          reduce using rule 63 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 87

    (66) expression -> LPAREN expression . RPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    RPAREN          shift and go to state 110
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 88

    (50) while_statement -> WHILE expression COLON . block
    (51) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 91

    block                          shift and go to state 111

state 89

    (33) funct_decl -> DEF type_funct ID . LPAREN arg_funct RPAREN COLON block_funct

    LPAREN          shift and go to state 112


state 90

    (19) register -> ID COLON block .

    TYPE            reduce using rule 19 (register -> ID COLON block .)
    COMMENT         reduce using rule 19 (register -> ID COLON block .)
    MLCOMMENT       reduce using rule 19 (register -> ID COLON block .)
    NEWLINE         reduce using rule 19 (register -> ID COLON block .)
    INT_TYPE        reduce using rule 19 (register -> ID COLON block .)
    FLOAT_TYPE      reduce using rule 19 (register -> ID COLON block .)
    CHAR_TYPE       reduce using rule 19 (register -> ID COLON block .)
    BOOL_TYPE       reduce using rule 19 (register -> ID COLON block .)
    ID              reduce using rule 19 (register -> ID COLON block .)
    IF              reduce using rule 19 (register -> ID COLON block .)
    WHILE           reduce using rule 19 (register -> ID COLON block .)
    DEF             reduce using rule 19 (register -> ID COLON block .)
    $end            reduce using rule 19 (register -> ID COLON block .)
    RBRACE          reduce using rule 19 (register -> ID COLON block .)
    RETURN          reduce using rule 19 (register -> ID COLON block .)


state 91

    (51) block -> LBRACE . statement_list RBRACE
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement_list                 shift and go to state 113
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 92

    (22) var_list -> var_list COMMA var_decl .

    COMMA           reduce using rule 22 (var_list -> var_list COMMA var_decl .)
    NEWLINE         reduce using rule 22 (var_list -> var_list COMMA var_decl .)
    EQUALS          reduce using rule 22 (var_list -> var_list COMMA var_decl .)


state 93

    (21) var_decl -> LBRACKET expression RBRACKET . ID

    ID              shift and go to state 114


state 94

    (26) assignment -> ID LBRACKET ID RBRACKET . EQUALS expression

    EQUALS          shift and go to state 115


state 95

    (25) assignment -> ID LBRACKET DECIMAL RBRACKET . EQUALS expression

    EQUALS          shift and go to state 116


state 96

    (30) unique_assignment -> ID EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 117

state 97

    (31) unique_assignment -> ID LBRACKET . DECIMAL RBRACKET EQUALS expression
    (32) unique_assignment -> ID LBRACKET . ID RBRACKET EQUALS expression

    DECIMAL         shift and go to state 119
    ID              shift and go to state 118


state 98

    (47) if_statement -> IF expression COLON block . else
    (48) else -> . NEWLINE ELSE COLON block
    (49) else -> . NEWLINE

    NEWLINE         shift and go to state 121

    else                           shift and go to state 120

state 99

    (52) expression -> expression PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 52 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 52 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 52 (expression -> expression PLUS expression .)
    EQ              reduce using rule 52 (expression -> expression PLUS expression .)
    GT              reduce using rule 52 (expression -> expression PLUS expression .)
    LT              reduce using rule 52 (expression -> expression PLUS expression .)
    GE              reduce using rule 52 (expression -> expression PLUS expression .)
    LE              reduce using rule 52 (expression -> expression PLUS expression .)
    AND             reduce using rule 52 (expression -> expression PLUS expression .)
    OR              reduce using rule 52 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 52 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 52 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 52 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 100

    (53) expression -> expression MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 53 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 53 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 53 (expression -> expression MINUS expression .)
    EQ              reduce using rule 53 (expression -> expression MINUS expression .)
    GT              reduce using rule 53 (expression -> expression MINUS expression .)
    LT              reduce using rule 53 (expression -> expression MINUS expression .)
    GE              reduce using rule 53 (expression -> expression MINUS expression .)
    LE              reduce using rule 53 (expression -> expression MINUS expression .)
    AND             reduce using rule 53 (expression -> expression MINUS expression .)
    OR              reduce using rule 53 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 53 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 53 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 53 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! TIMES           [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 101

    (54) expression -> expression TIMES expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 54 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 54 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 54 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 54 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 54 (expression -> expression TIMES expression .)
    EQ              reduce using rule 54 (expression -> expression TIMES expression .)
    GT              reduce using rule 54 (expression -> expression TIMES expression .)
    LT              reduce using rule 54 (expression -> expression TIMES expression .)
    GE              reduce using rule 54 (expression -> expression TIMES expression .)
    LE              reduce using rule 54 (expression -> expression TIMES expression .)
    AND             reduce using rule 54 (expression -> expression TIMES expression .)
    OR              reduce using rule 54 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 54 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 54 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 54 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 102

    (55) expression -> expression DIVIDE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 55 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 55 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 55 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 55 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 55 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 55 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 55 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 55 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 55 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 55 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 55 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 103

    (56) expression -> expression EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 56 (expression -> expression EQ expression .)
    EQ              reduce using rule 56 (expression -> expression EQ expression .)
    GT              reduce using rule 56 (expression -> expression EQ expression .)
    LT              reduce using rule 56 (expression -> expression EQ expression .)
    GE              reduce using rule 56 (expression -> expression EQ expression .)
    LE              reduce using rule 56 (expression -> expression EQ expression .)
    AND             reduce using rule 56 (expression -> expression EQ expression .)
    OR              reduce using rule 56 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 56 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 56 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 56 (expression -> expression EQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 56 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 104

    (57) expression -> expression GT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 57 (expression -> expression GT expression .)
    EQ              reduce using rule 57 (expression -> expression GT expression .)
    GT              reduce using rule 57 (expression -> expression GT expression .)
    LT              reduce using rule 57 (expression -> expression GT expression .)
    GE              reduce using rule 57 (expression -> expression GT expression .)
    LE              reduce using rule 57 (expression -> expression GT expression .)
    AND             reduce using rule 57 (expression -> expression GT expression .)
    OR              reduce using rule 57 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 57 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 57 (expression -> expression GT expression .)
    RPAREN          reduce using rule 57 (expression -> expression GT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 105

    (58) expression -> expression LT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 58 (expression -> expression LT expression .)
    EQ              reduce using rule 58 (expression -> expression LT expression .)
    GT              reduce using rule 58 (expression -> expression LT expression .)
    LT              reduce using rule 58 (expression -> expression LT expression .)
    GE              reduce using rule 58 (expression -> expression LT expression .)
    LE              reduce using rule 58 (expression -> expression LT expression .)
    AND             reduce using rule 58 (expression -> expression LT expression .)
    OR              reduce using rule 58 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 58 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 58 (expression -> expression LT expression .)
    RPAREN          reduce using rule 58 (expression -> expression LT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 106

    (59) expression -> expression GE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 59 (expression -> expression GE expression .)
    EQ              reduce using rule 59 (expression -> expression GE expression .)
    GT              reduce using rule 59 (expression -> expression GE expression .)
    LT              reduce using rule 59 (expression -> expression GE expression .)
    GE              reduce using rule 59 (expression -> expression GE expression .)
    LE              reduce using rule 59 (expression -> expression GE expression .)
    AND             reduce using rule 59 (expression -> expression GE expression .)
    OR              reduce using rule 59 (expression -> expression GE expression .)
    NEWLINE         reduce using rule 59 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 59 (expression -> expression GE expression .)
    RPAREN          reduce using rule 59 (expression -> expression GE expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 107

    (60) expression -> expression LE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 60 (expression -> expression LE expression .)
    EQ              reduce using rule 60 (expression -> expression LE expression .)
    GT              reduce using rule 60 (expression -> expression LE expression .)
    LT              reduce using rule 60 (expression -> expression LE expression .)
    GE              reduce using rule 60 (expression -> expression LE expression .)
    LE              reduce using rule 60 (expression -> expression LE expression .)
    AND             reduce using rule 60 (expression -> expression LE expression .)
    OR              reduce using rule 60 (expression -> expression LE expression .)
    NEWLINE         reduce using rule 60 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 60 (expression -> expression LE expression .)
    RPAREN          reduce using rule 60 (expression -> expression LE expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

  ! PLUS            [ reduce using rule 60 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 77 ]
  ! GT              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 108

    (61) expression -> expression AND expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 61 (expression -> expression AND expression .)
    AND             reduce using rule 61 (expression -> expression AND expression .)
    OR              reduce using rule 61 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 61 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 61 (expression -> expression AND expression .)
    RPAREN          reduce using rule 61 (expression -> expression AND expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81

  ! PLUS            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 109

    (62) expression -> expression OR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    COLON           reduce using rule 62 (expression -> expression OR expression .)
    AND             reduce using rule 62 (expression -> expression OR expression .)
    OR              reduce using rule 62 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 62 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 62 (expression -> expression OR expression .)
    RPAREN          reduce using rule 62 (expression -> expression OR expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81

  ! PLUS            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 110

    (66) expression -> LPAREN expression RPAREN .

    COLON           reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 66 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 66 (expression -> LPAREN expression RPAREN .)


state 111

    (50) while_statement -> WHILE expression COLON block .

    TYPE            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    COMMENT         reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    MLCOMMENT       reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    NEWLINE         reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    INT_TYPE        reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    FLOAT_TYPE      reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    CHAR_TYPE       reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    BOOL_TYPE       reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    ID              reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    IF              reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    WHILE           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    DEF             reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    $end            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    RBRACE          reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    RETURN          reduce using rule 50 (while_statement -> WHILE expression COLON block .)


state 112

    (33) funct_decl -> DEF type_funct ID LPAREN . arg_funct RPAREN COLON block_funct
    (38) arg_funct -> . type_funct ID extra another
    (34) type_funct -> . INT_TYPE
    (35) type_funct -> . FLOAT_TYPE
    (36) type_funct -> . BOOL_TYPE
    (37) type_funct -> . ID

    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    BOOL_TYPE       shift and go to state 59
    ID              shift and go to state 56

    type_funct                     shift and go to state 122
    arg_funct                      shift and go to state 123

state 113

    (51) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    RBRACE          shift and go to state 124
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement                      shift and go to state 21
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 114

    (21) var_decl -> LBRACKET expression RBRACKET ID .

    COMMA           reduce using rule 21 (var_decl -> LBRACKET expression RBRACKET ID .)
    NEWLINE         reduce using rule 21 (var_decl -> LBRACKET expression RBRACKET ID .)
    EQUALS          reduce using rule 21 (var_decl -> LBRACKET expression RBRACKET ID .)


state 115

    (26) assignment -> ID LBRACKET ID RBRACKET EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 125

state 116

    (25) assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 126

state 117

    (30) unique_assignment -> ID EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 30 (unique_assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 118

    (32) unique_assignment -> ID LBRACKET ID . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 127


state 119

    (31) unique_assignment -> ID LBRACKET DECIMAL . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 128


state 120

    (47) if_statement -> IF expression COLON block else .

    TYPE            reduce using rule 47 (if_statement -> IF expression COLON block else .)
    COMMENT         reduce using rule 47 (if_statement -> IF expression COLON block else .)
    MLCOMMENT       reduce using rule 47 (if_statement -> IF expression COLON block else .)
    NEWLINE         reduce using rule 47 (if_statement -> IF expression COLON block else .)
    INT_TYPE        reduce using rule 47 (if_statement -> IF expression COLON block else .)
    FLOAT_TYPE      reduce using rule 47 (if_statement -> IF expression COLON block else .)
    CHAR_TYPE       reduce using rule 47 (if_statement -> IF expression COLON block else .)
    BOOL_TYPE       reduce using rule 47 (if_statement -> IF expression COLON block else .)
    ID              reduce using rule 47 (if_statement -> IF expression COLON block else .)
    IF              reduce using rule 47 (if_statement -> IF expression COLON block else .)
    WHILE           reduce using rule 47 (if_statement -> IF expression COLON block else .)
    DEF             reduce using rule 47 (if_statement -> IF expression COLON block else .)
    $end            reduce using rule 47 (if_statement -> IF expression COLON block else .)
    RBRACE          reduce using rule 47 (if_statement -> IF expression COLON block else .)
    RETURN          reduce using rule 47 (if_statement -> IF expression COLON block else .)


state 121

    (48) else -> NEWLINE . ELSE COLON block
    (49) else -> NEWLINE .

    ELSE            shift and go to state 129
    TYPE            reduce using rule 49 (else -> NEWLINE .)
    COMMENT         reduce using rule 49 (else -> NEWLINE .)
    MLCOMMENT       reduce using rule 49 (else -> NEWLINE .)
    NEWLINE         reduce using rule 49 (else -> NEWLINE .)
    INT_TYPE        reduce using rule 49 (else -> NEWLINE .)
    FLOAT_TYPE      reduce using rule 49 (else -> NEWLINE .)
    CHAR_TYPE       reduce using rule 49 (else -> NEWLINE .)
    BOOL_TYPE       reduce using rule 49 (else -> NEWLINE .)
    ID              reduce using rule 49 (else -> NEWLINE .)
    IF              reduce using rule 49 (else -> NEWLINE .)
    WHILE           reduce using rule 49 (else -> NEWLINE .)
    DEF             reduce using rule 49 (else -> NEWLINE .)
    $end            reduce using rule 49 (else -> NEWLINE .)
    RBRACE          reduce using rule 49 (else -> NEWLINE .)
    RETURN          reduce using rule 49 (else -> NEWLINE .)


state 122

    (38) arg_funct -> type_funct . ID extra another

    ID              shift and go to state 130


state 123

    (33) funct_decl -> DEF type_funct ID LPAREN arg_funct . RPAREN COLON block_funct

    RPAREN          shift and go to state 131


state 124

    (51) block -> LBRACE statement_list RBRACE .

    TYPE            reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    COMMENT         reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    MLCOMMENT       reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    NEWLINE         reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    INT_TYPE        reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    FLOAT_TYPE      reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    CHAR_TYPE       reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    BOOL_TYPE       reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    DEF             reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 51 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 51 (block -> LBRACE statement_list RBRACE .)


state 125

    (26) assignment -> ID LBRACKET ID RBRACKET EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 26 (assignment -> ID LBRACKET ID RBRACKET EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 126

    (25) assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 25 (assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 127

    (32) unique_assignment -> ID LBRACKET ID RBRACKET . EQUALS expression

    EQUALS          shift and go to state 132


state 128

    (31) unique_assignment -> ID LBRACKET DECIMAL RBRACKET . EQUALS expression

    EQUALS          shift and go to state 133


state 129

    (48) else -> NEWLINE ELSE . COLON block

    COLON           shift and go to state 134


state 130

    (38) arg_funct -> type_funct ID . extra another
    (39) extra -> . COMMA ID extra
    (40) extra -> .

    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 40 (extra -> .)
    RPAREN          reduce using rule 40 (extra -> .)

    extra                          shift and go to state 135

state 131

    (33) funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN . COLON block_funct

    COLON           shift and go to state 137


state 132

    (32) unique_assignment -> ID LBRACKET ID RBRACKET EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 138

state 133

    (31) unique_assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression TIMES expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression EQ expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression GE expression
    (60) expression -> . expression LE expression
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . NOT expression
    (64) expression -> . MINUS expression
    (65) expression -> . PLUS expression
    (66) expression -> . LPAREN expression RPAREN
    (67) expression -> . DECIMAL
    (68) expression -> . BINARY
    (69) expression -> . OCTAL
    (70) expression -> . HEXADECIMAL
    (71) expression -> . FLOAT_CONST
    (72) expression -> . TRUE
    (73) expression -> . FALSE
    (74) expression -> . CHAR_CONST
    (75) expression -> . ID

    NOT             shift and go to state 43
    MINUS           shift and go to state 42
    PLUS            shift and go to state 41
    LPAREN          shift and go to state 44
    DECIMAL         shift and go to state 45
    BINARY          shift and go to state 46
    OCTAL           shift and go to state 47
    HEXADECIMAL     shift and go to state 48
    FLOAT_CONST     shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    CHAR_CONST      shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 139

state 134

    (48) else -> NEWLINE ELSE COLON . block
    (51) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 91

    block                          shift and go to state 140

state 135

    (38) arg_funct -> type_funct ID extra . another
    (41) another -> . SEMICOLON arg_funct
    (42) another -> .

    SEMICOLON       shift and go to state 142
    RPAREN          reduce using rule 42 (another -> .)

    another                        shift and go to state 141

state 136

    (39) extra -> COMMA . ID extra

    ID              shift and go to state 143


state 137

    (33) funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON . block_funct
    (43) block_funct -> . LBRACE statement_list funct_ret RBRACE

    LBRACE          shift and go to state 145

    block_funct                    shift and go to state 144

state 138

    (32) unique_assignment -> ID LBRACKET ID RBRACKET EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 32 (unique_assignment -> ID LBRACKET ID RBRACKET EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 139

    (31) unique_assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . TIMES expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . EQ expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . GE expression
    (60) expression -> expression . LE expression
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression

    NEWLINE         reduce using rule 31 (unique_assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    EQ              shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83


state 140

    (48) else -> NEWLINE ELSE COLON block .

    TYPE            reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    COMMENT         reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    MLCOMMENT       reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    NEWLINE         reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    INT_TYPE        reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    FLOAT_TYPE      reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    CHAR_TYPE       reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    BOOL_TYPE       reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    ID              reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    IF              reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    WHILE           reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    DEF             reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    $end            reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    RBRACE          reduce using rule 48 (else -> NEWLINE ELSE COLON block .)
    RETURN          reduce using rule 48 (else -> NEWLINE ELSE COLON block .)


state 141

    (38) arg_funct -> type_funct ID extra another .

    RPAREN          reduce using rule 38 (arg_funct -> type_funct ID extra another .)


state 142

    (41) another -> SEMICOLON . arg_funct
    (38) arg_funct -> . type_funct ID extra another
    (34) type_funct -> . INT_TYPE
    (35) type_funct -> . FLOAT_TYPE
    (36) type_funct -> . BOOL_TYPE
    (37) type_funct -> . ID

    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    BOOL_TYPE       shift and go to state 59
    ID              shift and go to state 56

    arg_funct                      shift and go to state 146
    type_funct                     shift and go to state 122

state 143

    (39) extra -> COMMA ID . extra
    (39) extra -> . COMMA ID extra
    (40) extra -> .

    COMMA           shift and go to state 136
    SEMICOLON       reduce using rule 40 (extra -> .)
    RPAREN          reduce using rule 40 (extra -> .)

    extra                          shift and go to state 147

state 144

    (33) funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .

    TYPE            reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    COMMENT         reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    MLCOMMENT       reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    NEWLINE         reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    INT_TYPE        reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    FLOAT_TYPE      reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    CHAR_TYPE       reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    BOOL_TYPE       reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    ID              reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    IF              reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    WHILE           reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    DEF             reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    $end            reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    RBRACE          reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)
    RETURN          reduce using rule 33 (funct_decl -> DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct .)


state 145

    (43) block_funct -> LBRACE . statement_list funct_ret RBRACE
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement_list                 shift and go to state 148
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 146

    (41) another -> SEMICOLON arg_funct .

    RPAREN          reduce using rule 41 (another -> SEMICOLON arg_funct .)


state 147

    (39) extra -> COMMA ID extra .

    SEMICOLON       reduce using rule 39 (extra -> COMMA ID extra .)
    RPAREN          reduce using rule 39 (extra -> COMMA ID extra .)


state 148

    (43) block_funct -> LBRACE statement_list . funct_ret RBRACE
    (3) statement_list -> statement_list . statement
    (44) funct_ret -> . RETURN ID newlines
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (18) declaration -> . ID ID
    (24) assignment -> . ID EQUALS expression
    (25) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (26) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> . declaration EQUALS expression
    (28) assignment -> . ID EQUALS assignment
    (29) assignment -> . ID DOT unique_assignment
    (47) if_statement -> . IF expression COLON block else
    (50) while_statement -> . WHILE expression COLON block
    (33) funct_decl -> . DEF type_funct ID LPAREN arg_funct RPAREN COLON block_funct

    RETURN          shift and go to state 150
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    funct_ret                      shift and go to state 149
    statement                      shift and go to state 21
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 149

    (43) block_funct -> LBRACE statement_list funct_ret . RBRACE

    RBRACE          shift and go to state 151


state 150

    (44) funct_ret -> RETURN . ID newlines

    ID              shift and go to state 152


state 151

    (43) block_funct -> LBRACE statement_list funct_ret RBRACE .

    TYPE            reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    COMMENT         reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    MLCOMMENT       reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    NEWLINE         reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    INT_TYPE        reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    FLOAT_TYPE      reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    CHAR_TYPE       reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    BOOL_TYPE       reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    ID              reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    IF              reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    WHILE           reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    DEF             reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    $end            reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    RBRACE          reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)
    RETURN          reduce using rule 43 (block_funct -> LBRACE statement_list funct_ret RBRACE .)


state 152

    (44) funct_ret -> RETURN ID . newlines
    (45) newlines -> . NEWLINE
    (46) newlines -> .

    NEWLINE         shift and go to state 154
    RBRACE          reduce using rule 46 (newlines -> .)

    newlines                       shift and go to state 153

state 153

    (44) funct_ret -> RETURN ID newlines .

    RBRACE          reduce using rule 44 (funct_ret -> RETURN ID newlines .)


state 154

    (45) newlines -> NEWLINE .

    RBRACE          reduce using rule 45 (newlines -> NEWLINE .)

