Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    RETURN
    SEMICOLON

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement_list -> statement
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> if_statement
Rule 8     statement -> TYPE register
Rule 9     statement -> while_statement
Rule 10    statement -> COMMENT NEWLINE
Rule 11    statement -> MLCOMMENT NEWLINE
Rule 12    statement -> funct_decl
Rule 13    statement -> NEWLINE
Rule 14    declaration -> INT_TYPE var_list
Rule 15    declaration -> FLOAT_TYPE var_list
Rule 16    declaration -> CHAR_TYPE var_list
Rule 17    declaration -> BOOL_TYPE var_list
Rule 18    register -> ID COLON block
Rule 19    var_decl -> ID
Rule 20    var_decl -> LBRACKET expression RBRACKET ID
Rule 21    var_list -> var_list COMMA var_decl
Rule 22    var_list -> var_decl
Rule 23    assignment -> ID EQUALS expression
Rule 24    assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression
Rule 25    assignment -> ID LBRACKET ID RBRACKET EQUALS expression
Rule 26    assignment -> declaration EQUALS expression
Rule 27    assignment -> ID EQUALS assignment
Rule 28    funct_decl -> DEF
Rule 29    if_statement -> IF expression COLON block else
Rule 30    else -> NEWLINE ELSE COLON block
Rule 31    else -> NEWLINE
Rule 32    while_statement -> WHILE expression COLON block
Rule 33    block -> LBRACE statement_list RBRACE
Rule 34    expression -> expression PLUS expression
Rule 35    expression -> expression MINUS expression
Rule 36    expression -> expression TIMES expression
Rule 37    expression -> expression DIVIDE expression
Rule 38    expression -> expression EQ expression
Rule 39    expression -> expression GT expression
Rule 40    expression -> expression LT expression
Rule 41    expression -> expression GE expression
Rule 42    expression -> expression LE expression
Rule 43    expression -> expression AND expression
Rule 44    expression -> expression OR expression
Rule 45    expression -> NOT expression
Rule 46    expression -> MINUS expression
Rule 47    expression -> PLUS expression
Rule 48    expression -> LPAREN expression RPAREN
Rule 49    expression -> DECIMAL
Rule 50    expression -> BINARY
Rule 51    expression -> OCTAL
Rule 52    expression -> HEXADECIMAL
Rule 53    expression -> FLOAT_CONST
Rule 54    expression -> TRUE
Rule 55    expression -> FALSE
Rule 56    expression -> CHAR_CONST
Rule 57    type_funct -> DECIMAL
Rule 58    type_funct -> FLOAT_TYPE
Rule 59    type_funct -> BOOL_TYPE
Rule 60    expression -> ID

Terminals, with rules where they appear

AND                  : 43
BINARY               : 50
BOOL_TYPE            : 17 59
CHAR_CONST           : 56
CHAR_TYPE            : 16
COLON                : 18 29 30 32
COMMA                : 21
COMMENT              : 10
DECIMAL              : 24 49 57
DEF                  : 28
DIVIDE               : 37
DOT                  : 
ELSE                 : 30
EQ                   : 38
EQUALS               : 23 24 25 26 27
FALSE                : 55
FLOAT_CONST          : 53
FLOAT_TYPE           : 15 58
GE                   : 41
GT                   : 39
HEXADECIMAL          : 52
ID                   : 18 19 20 23 24 25 25 27 60
IF                   : 29
INT_TYPE             : 14
LBRACE               : 33
LBRACKET             : 20 24 25
LE                   : 42
LPAREN               : 48
LT                   : 40
MINUS                : 35 46
MLCOMMENT            : 11
NEWLINE              : 5 6 10 11 13 30 31
NOT                  : 45
OCTAL                : 51
OR                   : 44
PLUS                 : 34 47
RBRACE               : 33
RBRACKET             : 20 24 25
RETURN               : 
RPAREN               : 48
SEMICOLON            : 
TIMES                : 36
TRUE                 : 54
TYPE                 : 8
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

assignment           : 6 27
block                : 18 29 30 32
declaration          : 5 26
else                 : 29
expression           : 20 23 24 25 26 29 32 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46 47 48
funct_decl           : 12
if_statement         : 7
program              : 0
register             : 8
statement            : 3 4
statement_list       : 1 3 33
type_funct           : 
var_decl             : 21 22
var_list             : 14 15 16 17 21
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> .
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (23) assignment -> . ID EQUALS expression
    (24) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (26) assignment -> . declaration EQUALS expression
    (27) assignment -> . ID EQUALS assignment
    (29) if_statement -> . IF expression COLON block else
    (32) while_statement -> . WHILE expression COLON block
    (28) funct_decl -> . DEF

    $end            reduce using rule 2 (program -> .)
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (23) assignment -> . ID EQUALS expression
    (24) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (26) assignment -> . declaration EQUALS expression
    (27) assignment -> . ID EQUALS assignment
    (29) if_statement -> . IF expression COLON block else
    (32) while_statement -> . WHILE expression COLON block
    (28) funct_decl -> . DEF

    $end            reduce using rule 1 (program -> statement_list .)
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement                      shift and go to state 21
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 3

    (4) statement_list -> statement .

    TYPE            reduce using rule 4 (statement_list -> statement .)
    COMMENT         reduce using rule 4 (statement_list -> statement .)
    MLCOMMENT       reduce using rule 4 (statement_list -> statement .)
    NEWLINE         reduce using rule 4 (statement_list -> statement .)
    INT_TYPE        reduce using rule 4 (statement_list -> statement .)
    FLOAT_TYPE      reduce using rule 4 (statement_list -> statement .)
    CHAR_TYPE       reduce using rule 4 (statement_list -> statement .)
    BOOL_TYPE       reduce using rule 4 (statement_list -> statement .)
    ID              reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    DEF             reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    RBRACE          reduce using rule 4 (statement_list -> statement .)


state 4

    (5) statement -> declaration . NEWLINE
    (26) assignment -> declaration . EQUALS expression

    NEWLINE         shift and go to state 22
    EQUALS          shift and go to state 23


state 5

    (13) statement -> NEWLINE .

    TYPE            reduce using rule 13 (statement -> NEWLINE .)
    COMMENT         reduce using rule 13 (statement -> NEWLINE .)
    MLCOMMENT       reduce using rule 13 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> NEWLINE .)
    INT_TYPE        reduce using rule 13 (statement -> NEWLINE .)
    FLOAT_TYPE      reduce using rule 13 (statement -> NEWLINE .)
    CHAR_TYPE       reduce using rule 13 (statement -> NEWLINE .)
    BOOL_TYPE       reduce using rule 13 (statement -> NEWLINE .)
    ID              reduce using rule 13 (statement -> NEWLINE .)
    IF              reduce using rule 13 (statement -> NEWLINE .)
    WHILE           reduce using rule 13 (statement -> NEWLINE .)
    DEF             reduce using rule 13 (statement -> NEWLINE .)
    $end            reduce using rule 13 (statement -> NEWLINE .)
    RBRACE          reduce using rule 13 (statement -> NEWLINE .)


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 24


state 7

    (7) statement -> if_statement .

    TYPE            reduce using rule 7 (statement -> if_statement .)
    COMMENT         reduce using rule 7 (statement -> if_statement .)
    MLCOMMENT       reduce using rule 7 (statement -> if_statement .)
    NEWLINE         reduce using rule 7 (statement -> if_statement .)
    INT_TYPE        reduce using rule 7 (statement -> if_statement .)
    FLOAT_TYPE      reduce using rule 7 (statement -> if_statement .)
    CHAR_TYPE       reduce using rule 7 (statement -> if_statement .)
    BOOL_TYPE       reduce using rule 7 (statement -> if_statement .)
    ID              reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    DEF             reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACE          reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> TYPE . register
    (18) register -> . ID COLON block

    ID              shift and go to state 26

    register                       shift and go to state 25

state 9

    (9) statement -> while_statement .

    TYPE            reduce using rule 9 (statement -> while_statement .)
    COMMENT         reduce using rule 9 (statement -> while_statement .)
    MLCOMMENT       reduce using rule 9 (statement -> while_statement .)
    NEWLINE         reduce using rule 9 (statement -> while_statement .)
    INT_TYPE        reduce using rule 9 (statement -> while_statement .)
    FLOAT_TYPE      reduce using rule 9 (statement -> while_statement .)
    CHAR_TYPE       reduce using rule 9 (statement -> while_statement .)
    BOOL_TYPE       reduce using rule 9 (statement -> while_statement .)
    ID              reduce using rule 9 (statement -> while_statement .)
    IF              reduce using rule 9 (statement -> while_statement .)
    WHILE           reduce using rule 9 (statement -> while_statement .)
    DEF             reduce using rule 9 (statement -> while_statement .)
    $end            reduce using rule 9 (statement -> while_statement .)
    RBRACE          reduce using rule 9 (statement -> while_statement .)


state 10

    (10) statement -> COMMENT . NEWLINE

    NEWLINE         shift and go to state 27


state 11

    (11) statement -> MLCOMMENT . NEWLINE

    NEWLINE         shift and go to state 28


state 12

    (12) statement -> funct_decl .

    TYPE            reduce using rule 12 (statement -> funct_decl .)
    COMMENT         reduce using rule 12 (statement -> funct_decl .)
    MLCOMMENT       reduce using rule 12 (statement -> funct_decl .)
    NEWLINE         reduce using rule 12 (statement -> funct_decl .)
    INT_TYPE        reduce using rule 12 (statement -> funct_decl .)
    FLOAT_TYPE      reduce using rule 12 (statement -> funct_decl .)
    CHAR_TYPE       reduce using rule 12 (statement -> funct_decl .)
    BOOL_TYPE       reduce using rule 12 (statement -> funct_decl .)
    ID              reduce using rule 12 (statement -> funct_decl .)
    IF              reduce using rule 12 (statement -> funct_decl .)
    WHILE           reduce using rule 12 (statement -> funct_decl .)
    DEF             reduce using rule 12 (statement -> funct_decl .)
    $end            reduce using rule 12 (statement -> funct_decl .)
    RBRACE          reduce using rule 12 (statement -> funct_decl .)


state 13

    (14) declaration -> INT_TYPE . var_list
    (21) var_list -> . var_list COMMA var_decl
    (22) var_list -> . var_decl
    (19) var_decl -> . ID
    (20) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 29
    var_decl                       shift and go to state 30

state 14

    (15) declaration -> FLOAT_TYPE . var_list
    (21) var_list -> . var_list COMMA var_decl
    (22) var_list -> . var_decl
    (19) var_decl -> . ID
    (20) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 33
    var_decl                       shift and go to state 30

state 15

    (16) declaration -> CHAR_TYPE . var_list
    (21) var_list -> . var_list COMMA var_decl
    (22) var_list -> . var_decl
    (19) var_decl -> . ID
    (20) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 34
    var_decl                       shift and go to state 30

state 16

    (17) declaration -> BOOL_TYPE . var_list
    (21) var_list -> . var_list COMMA var_decl
    (22) var_list -> . var_decl
    (19) var_decl -> . ID
    (20) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_list                       shift and go to state 35
    var_decl                       shift and go to state 30

state 17

    (23) assignment -> ID . EQUALS expression
    (24) assignment -> ID . LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> ID . LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> ID . EQUALS assignment

    EQUALS          shift and go to state 36
    LBRACKET        shift and go to state 37


state 18

    (29) if_statement -> IF . expression COLON block else
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 38

state 19

    (32) while_statement -> WHILE . expression COLON block
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 52

state 20

    (28) funct_decl -> DEF .

    TYPE            reduce using rule 28 (funct_decl -> DEF .)
    COMMENT         reduce using rule 28 (funct_decl -> DEF .)
    MLCOMMENT       reduce using rule 28 (funct_decl -> DEF .)
    NEWLINE         reduce using rule 28 (funct_decl -> DEF .)
    INT_TYPE        reduce using rule 28 (funct_decl -> DEF .)
    FLOAT_TYPE      reduce using rule 28 (funct_decl -> DEF .)
    CHAR_TYPE       reduce using rule 28 (funct_decl -> DEF .)
    BOOL_TYPE       reduce using rule 28 (funct_decl -> DEF .)
    ID              reduce using rule 28 (funct_decl -> DEF .)
    IF              reduce using rule 28 (funct_decl -> DEF .)
    WHILE           reduce using rule 28 (funct_decl -> DEF .)
    DEF             reduce using rule 28 (funct_decl -> DEF .)
    $end            reduce using rule 28 (funct_decl -> DEF .)
    RBRACE          reduce using rule 28 (funct_decl -> DEF .)


state 21

    (3) statement_list -> statement_list statement .

    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement_list statement .)
    MLCOMMENT       reduce using rule 3 (statement_list -> statement_list statement .)
    NEWLINE         reduce using rule 3 (statement_list -> statement_list statement .)
    INT_TYPE        reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT_TYPE      reduce using rule 3 (statement_list -> statement_list statement .)
    CHAR_TYPE       reduce using rule 3 (statement_list -> statement_list statement .)
    BOOL_TYPE       reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    DEF             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 22

    (5) statement -> declaration NEWLINE .

    TYPE            reduce using rule 5 (statement -> declaration NEWLINE .)
    COMMENT         reduce using rule 5 (statement -> declaration NEWLINE .)
    MLCOMMENT       reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    INT_TYPE        reduce using rule 5 (statement -> declaration NEWLINE .)
    FLOAT_TYPE      reduce using rule 5 (statement -> declaration NEWLINE .)
    CHAR_TYPE       reduce using rule 5 (statement -> declaration NEWLINE .)
    BOOL_TYPE       reduce using rule 5 (statement -> declaration NEWLINE .)
    ID              reduce using rule 5 (statement -> declaration NEWLINE .)
    IF              reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    DEF             reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    RBRACE          reduce using rule 5 (statement -> declaration NEWLINE .)


state 23

    (26) assignment -> declaration EQUALS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 53

state 24

    (6) statement -> assignment NEWLINE .

    TYPE            reduce using rule 6 (statement -> assignment NEWLINE .)
    COMMENT         reduce using rule 6 (statement -> assignment NEWLINE .)
    MLCOMMENT       reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    INT_TYPE        reduce using rule 6 (statement -> assignment NEWLINE .)
    FLOAT_TYPE      reduce using rule 6 (statement -> assignment NEWLINE .)
    CHAR_TYPE       reduce using rule 6 (statement -> assignment NEWLINE .)
    BOOL_TYPE       reduce using rule 6 (statement -> assignment NEWLINE .)
    ID              reduce using rule 6 (statement -> assignment NEWLINE .)
    IF              reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    DEF             reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    RBRACE          reduce using rule 6 (statement -> assignment NEWLINE .)


state 25

    (8) statement -> TYPE register .

    TYPE            reduce using rule 8 (statement -> TYPE register .)
    COMMENT         reduce using rule 8 (statement -> TYPE register .)
    MLCOMMENT       reduce using rule 8 (statement -> TYPE register .)
    NEWLINE         reduce using rule 8 (statement -> TYPE register .)
    INT_TYPE        reduce using rule 8 (statement -> TYPE register .)
    FLOAT_TYPE      reduce using rule 8 (statement -> TYPE register .)
    CHAR_TYPE       reduce using rule 8 (statement -> TYPE register .)
    BOOL_TYPE       reduce using rule 8 (statement -> TYPE register .)
    ID              reduce using rule 8 (statement -> TYPE register .)
    IF              reduce using rule 8 (statement -> TYPE register .)
    WHILE           reduce using rule 8 (statement -> TYPE register .)
    DEF             reduce using rule 8 (statement -> TYPE register .)
    $end            reduce using rule 8 (statement -> TYPE register .)
    RBRACE          reduce using rule 8 (statement -> TYPE register .)


state 26

    (18) register -> ID . COLON block

    COLON           shift and go to state 54


state 27

    (10) statement -> COMMENT NEWLINE .

    TYPE            reduce using rule 10 (statement -> COMMENT NEWLINE .)
    COMMENT         reduce using rule 10 (statement -> COMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> COMMENT NEWLINE .)
    INT_TYPE        reduce using rule 10 (statement -> COMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 10 (statement -> COMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 10 (statement -> COMMENT NEWLINE .)
    ID              reduce using rule 10 (statement -> COMMENT NEWLINE .)
    IF              reduce using rule 10 (statement -> COMMENT NEWLINE .)
    WHILE           reduce using rule 10 (statement -> COMMENT NEWLINE .)
    DEF             reduce using rule 10 (statement -> COMMENT NEWLINE .)
    $end            reduce using rule 10 (statement -> COMMENT NEWLINE .)
    RBRACE          reduce using rule 10 (statement -> COMMENT NEWLINE .)


state 28

    (11) statement -> MLCOMMENT NEWLINE .

    TYPE            reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    COMMENT         reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    MLCOMMENT       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    INT_TYPE        reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    FLOAT_TYPE      reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    CHAR_TYPE       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    BOOL_TYPE       reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    ID              reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    IF              reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    WHILE           reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    DEF             reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    $end            reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)
    RBRACE          reduce using rule 11 (statement -> MLCOMMENT NEWLINE .)


state 29

    (14) declaration -> INT_TYPE var_list .
    (21) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 14 (declaration -> INT_TYPE var_list .)
    EQUALS          reduce using rule 14 (declaration -> INT_TYPE var_list .)
    COMMA           shift and go to state 55


state 30

    (22) var_list -> var_decl .

    COMMA           reduce using rule 22 (var_list -> var_decl .)
    NEWLINE         reduce using rule 22 (var_list -> var_decl .)
    EQUALS          reduce using rule 22 (var_list -> var_decl .)


state 31

    (19) var_decl -> ID .

    COMMA           reduce using rule 19 (var_decl -> ID .)
    NEWLINE         reduce using rule 19 (var_decl -> ID .)
    EQUALS          reduce using rule 19 (var_decl -> ID .)


state 32

    (20) var_decl -> LBRACKET . expression RBRACKET ID
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 56

state 33

    (15) declaration -> FLOAT_TYPE var_list .
    (21) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 15 (declaration -> FLOAT_TYPE var_list .)
    EQUALS          reduce using rule 15 (declaration -> FLOAT_TYPE var_list .)
    COMMA           shift and go to state 55


state 34

    (16) declaration -> CHAR_TYPE var_list .
    (21) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 16 (declaration -> CHAR_TYPE var_list .)
    EQUALS          reduce using rule 16 (declaration -> CHAR_TYPE var_list .)
    COMMA           shift and go to state 55


state 35

    (17) declaration -> BOOL_TYPE var_list .
    (21) var_list -> var_list . COMMA var_decl

    NEWLINE         reduce using rule 17 (declaration -> BOOL_TYPE var_list .)
    EQUALS          reduce using rule 17 (declaration -> BOOL_TYPE var_list .)
    COMMA           shift and go to state 55


state 36

    (23) assignment -> ID EQUALS . expression
    (27) assignment -> ID EQUALS . assignment
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID
    (23) assignment -> . ID EQUALS expression
    (24) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (26) assignment -> . declaration EQUALS expression
    (27) assignment -> . ID EQUALS assignment
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 57
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16

    expression                     shift and go to state 58
    assignment                     shift and go to state 59
    declaration                    shift and go to state 60

state 37

    (24) assignment -> ID LBRACKET . DECIMAL RBRACKET EQUALS expression
    (25) assignment -> ID LBRACKET . ID RBRACKET EQUALS expression

    DECIMAL         shift and go to state 62
    ID              shift and go to state 61


state 38

    (29) if_statement -> IF expression . COLON block else
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 39

    (47) expression -> PLUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 75

state 40

    (46) expression -> MINUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 76

state 41

    (45) expression -> NOT . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 77

state 42

    (48) expression -> LPAREN . expression RPAREN
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 78

state 43

    (49) expression -> DECIMAL .

    COLON           reduce using rule 49 (expression -> DECIMAL .)
    PLUS            reduce using rule 49 (expression -> DECIMAL .)
    MINUS           reduce using rule 49 (expression -> DECIMAL .)
    TIMES           reduce using rule 49 (expression -> DECIMAL .)
    DIVIDE          reduce using rule 49 (expression -> DECIMAL .)
    EQ              reduce using rule 49 (expression -> DECIMAL .)
    GT              reduce using rule 49 (expression -> DECIMAL .)
    LT              reduce using rule 49 (expression -> DECIMAL .)
    GE              reduce using rule 49 (expression -> DECIMAL .)
    LE              reduce using rule 49 (expression -> DECIMAL .)
    AND             reduce using rule 49 (expression -> DECIMAL .)
    OR              reduce using rule 49 (expression -> DECIMAL .)
    NEWLINE         reduce using rule 49 (expression -> DECIMAL .)
    RBRACKET        reduce using rule 49 (expression -> DECIMAL .)
    RPAREN          reduce using rule 49 (expression -> DECIMAL .)


state 44

    (50) expression -> BINARY .

    COLON           reduce using rule 50 (expression -> BINARY .)
    PLUS            reduce using rule 50 (expression -> BINARY .)
    MINUS           reduce using rule 50 (expression -> BINARY .)
    TIMES           reduce using rule 50 (expression -> BINARY .)
    DIVIDE          reduce using rule 50 (expression -> BINARY .)
    EQ              reduce using rule 50 (expression -> BINARY .)
    GT              reduce using rule 50 (expression -> BINARY .)
    LT              reduce using rule 50 (expression -> BINARY .)
    GE              reduce using rule 50 (expression -> BINARY .)
    LE              reduce using rule 50 (expression -> BINARY .)
    AND             reduce using rule 50 (expression -> BINARY .)
    OR              reduce using rule 50 (expression -> BINARY .)
    NEWLINE         reduce using rule 50 (expression -> BINARY .)
    RBRACKET        reduce using rule 50 (expression -> BINARY .)
    RPAREN          reduce using rule 50 (expression -> BINARY .)


state 45

    (51) expression -> OCTAL .

    COLON           reduce using rule 51 (expression -> OCTAL .)
    PLUS            reduce using rule 51 (expression -> OCTAL .)
    MINUS           reduce using rule 51 (expression -> OCTAL .)
    TIMES           reduce using rule 51 (expression -> OCTAL .)
    DIVIDE          reduce using rule 51 (expression -> OCTAL .)
    EQ              reduce using rule 51 (expression -> OCTAL .)
    GT              reduce using rule 51 (expression -> OCTAL .)
    LT              reduce using rule 51 (expression -> OCTAL .)
    GE              reduce using rule 51 (expression -> OCTAL .)
    LE              reduce using rule 51 (expression -> OCTAL .)
    AND             reduce using rule 51 (expression -> OCTAL .)
    OR              reduce using rule 51 (expression -> OCTAL .)
    NEWLINE         reduce using rule 51 (expression -> OCTAL .)
    RBRACKET        reduce using rule 51 (expression -> OCTAL .)
    RPAREN          reduce using rule 51 (expression -> OCTAL .)


state 46

    (52) expression -> HEXADECIMAL .

    COLON           reduce using rule 52 (expression -> HEXADECIMAL .)
    PLUS            reduce using rule 52 (expression -> HEXADECIMAL .)
    MINUS           reduce using rule 52 (expression -> HEXADECIMAL .)
    TIMES           reduce using rule 52 (expression -> HEXADECIMAL .)
    DIVIDE          reduce using rule 52 (expression -> HEXADECIMAL .)
    EQ              reduce using rule 52 (expression -> HEXADECIMAL .)
    GT              reduce using rule 52 (expression -> HEXADECIMAL .)
    LT              reduce using rule 52 (expression -> HEXADECIMAL .)
    GE              reduce using rule 52 (expression -> HEXADECIMAL .)
    LE              reduce using rule 52 (expression -> HEXADECIMAL .)
    AND             reduce using rule 52 (expression -> HEXADECIMAL .)
    OR              reduce using rule 52 (expression -> HEXADECIMAL .)
    NEWLINE         reduce using rule 52 (expression -> HEXADECIMAL .)
    RBRACKET        reduce using rule 52 (expression -> HEXADECIMAL .)
    RPAREN          reduce using rule 52 (expression -> HEXADECIMAL .)


state 47

    (53) expression -> FLOAT_CONST .

    COLON           reduce using rule 53 (expression -> FLOAT_CONST .)
    PLUS            reduce using rule 53 (expression -> FLOAT_CONST .)
    MINUS           reduce using rule 53 (expression -> FLOAT_CONST .)
    TIMES           reduce using rule 53 (expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 53 (expression -> FLOAT_CONST .)
    EQ              reduce using rule 53 (expression -> FLOAT_CONST .)
    GT              reduce using rule 53 (expression -> FLOAT_CONST .)
    LT              reduce using rule 53 (expression -> FLOAT_CONST .)
    GE              reduce using rule 53 (expression -> FLOAT_CONST .)
    LE              reduce using rule 53 (expression -> FLOAT_CONST .)
    AND             reduce using rule 53 (expression -> FLOAT_CONST .)
    OR              reduce using rule 53 (expression -> FLOAT_CONST .)
    NEWLINE         reduce using rule 53 (expression -> FLOAT_CONST .)
    RBRACKET        reduce using rule 53 (expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 53 (expression -> FLOAT_CONST .)


state 48

    (54) expression -> TRUE .

    COLON           reduce using rule 54 (expression -> TRUE .)
    PLUS            reduce using rule 54 (expression -> TRUE .)
    MINUS           reduce using rule 54 (expression -> TRUE .)
    TIMES           reduce using rule 54 (expression -> TRUE .)
    DIVIDE          reduce using rule 54 (expression -> TRUE .)
    EQ              reduce using rule 54 (expression -> TRUE .)
    GT              reduce using rule 54 (expression -> TRUE .)
    LT              reduce using rule 54 (expression -> TRUE .)
    GE              reduce using rule 54 (expression -> TRUE .)
    LE              reduce using rule 54 (expression -> TRUE .)
    AND             reduce using rule 54 (expression -> TRUE .)
    OR              reduce using rule 54 (expression -> TRUE .)
    NEWLINE         reduce using rule 54 (expression -> TRUE .)
    RBRACKET        reduce using rule 54 (expression -> TRUE .)
    RPAREN          reduce using rule 54 (expression -> TRUE .)


state 49

    (55) expression -> FALSE .

    COLON           reduce using rule 55 (expression -> FALSE .)
    PLUS            reduce using rule 55 (expression -> FALSE .)
    MINUS           reduce using rule 55 (expression -> FALSE .)
    TIMES           reduce using rule 55 (expression -> FALSE .)
    DIVIDE          reduce using rule 55 (expression -> FALSE .)
    EQ              reduce using rule 55 (expression -> FALSE .)
    GT              reduce using rule 55 (expression -> FALSE .)
    LT              reduce using rule 55 (expression -> FALSE .)
    GE              reduce using rule 55 (expression -> FALSE .)
    LE              reduce using rule 55 (expression -> FALSE .)
    AND             reduce using rule 55 (expression -> FALSE .)
    OR              reduce using rule 55 (expression -> FALSE .)
    NEWLINE         reduce using rule 55 (expression -> FALSE .)
    RBRACKET        reduce using rule 55 (expression -> FALSE .)
    RPAREN          reduce using rule 55 (expression -> FALSE .)


state 50

    (56) expression -> CHAR_CONST .

    COLON           reduce using rule 56 (expression -> CHAR_CONST .)
    PLUS            reduce using rule 56 (expression -> CHAR_CONST .)
    MINUS           reduce using rule 56 (expression -> CHAR_CONST .)
    TIMES           reduce using rule 56 (expression -> CHAR_CONST .)
    DIVIDE          reduce using rule 56 (expression -> CHAR_CONST .)
    EQ              reduce using rule 56 (expression -> CHAR_CONST .)
    GT              reduce using rule 56 (expression -> CHAR_CONST .)
    LT              reduce using rule 56 (expression -> CHAR_CONST .)
    GE              reduce using rule 56 (expression -> CHAR_CONST .)
    LE              reduce using rule 56 (expression -> CHAR_CONST .)
    AND             reduce using rule 56 (expression -> CHAR_CONST .)
    OR              reduce using rule 56 (expression -> CHAR_CONST .)
    NEWLINE         reduce using rule 56 (expression -> CHAR_CONST .)
    RBRACKET        reduce using rule 56 (expression -> CHAR_CONST .)
    RPAREN          reduce using rule 56 (expression -> CHAR_CONST .)


state 51

    (60) expression -> ID .

    COLON           reduce using rule 60 (expression -> ID .)
    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    TIMES           reduce using rule 60 (expression -> ID .)
    DIVIDE          reduce using rule 60 (expression -> ID .)
    EQ              reduce using rule 60 (expression -> ID .)
    GT              reduce using rule 60 (expression -> ID .)
    LT              reduce using rule 60 (expression -> ID .)
    GE              reduce using rule 60 (expression -> ID .)
    LE              reduce using rule 60 (expression -> ID .)
    AND             reduce using rule 60 (expression -> ID .)
    OR              reduce using rule 60 (expression -> ID .)
    NEWLINE         reduce using rule 60 (expression -> ID .)
    RBRACKET        reduce using rule 60 (expression -> ID .)
    RPAREN          reduce using rule 60 (expression -> ID .)


state 52

    (32) while_statement -> WHILE expression . COLON block
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           shift and go to state 79
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 53

    (26) assignment -> declaration EQUALS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    NEWLINE         reduce using rule 26 (assignment -> declaration EQUALS expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 54

    (18) register -> ID COLON . block
    (33) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 81

    block                          shift and go to state 80

state 55

    (21) var_list -> var_list COMMA . var_decl
    (19) var_decl -> . ID
    (20) var_decl -> . LBRACKET expression RBRACKET ID

    ID              shift and go to state 31
    LBRACKET        shift and go to state 32

    var_decl                       shift and go to state 82

state 56

    (20) var_decl -> LBRACKET expression . RBRACKET ID
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RBRACKET        shift and go to state 83
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 57

    (60) expression -> ID .
    (23) assignment -> ID . EQUALS expression
    (24) assignment -> ID . LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> ID . LBRACKET ID RBRACKET EQUALS expression
    (27) assignment -> ID . EQUALS assignment

    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    TIMES           reduce using rule 60 (expression -> ID .)
    DIVIDE          reduce using rule 60 (expression -> ID .)
    EQ              reduce using rule 60 (expression -> ID .)
    GT              reduce using rule 60 (expression -> ID .)
    LT              reduce using rule 60 (expression -> ID .)
    GE              reduce using rule 60 (expression -> ID .)
    LE              reduce using rule 60 (expression -> ID .)
    AND             reduce using rule 60 (expression -> ID .)
    OR              reduce using rule 60 (expression -> ID .)
    NEWLINE         reduce using rule 60 (expression -> ID .)
    EQUALS          shift and go to state 36
    LBRACKET        shift and go to state 37


state 58

    (23) assignment -> ID EQUALS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    NEWLINE         reduce using rule 23 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 59

    (27) assignment -> ID EQUALS assignment .

    NEWLINE         reduce using rule 27 (assignment -> ID EQUALS assignment .)


state 60

    (26) assignment -> declaration . EQUALS expression

    EQUALS          shift and go to state 23


state 61

    (25) assignment -> ID LBRACKET ID . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 84


state 62

    (24) assignment -> ID LBRACKET DECIMAL . RBRACKET EQUALS expression

    RBRACKET        shift and go to state 85


state 63

    (29) if_statement -> IF expression COLON . block else
    (33) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 81

    block                          shift and go to state 86

state 64

    (34) expression -> expression PLUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 87

state 65

    (35) expression -> expression MINUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 88

state 66

    (36) expression -> expression TIMES . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 89

state 67

    (37) expression -> expression DIVIDE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 90

state 68

    (38) expression -> expression EQ . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 91

state 69

    (39) expression -> expression GT . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 92

state 70

    (40) expression -> expression LT . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 93

state 71

    (41) expression -> expression GE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 94

state 72

    (42) expression -> expression LE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 95

state 73

    (43) expression -> expression AND . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 96

state 74

    (44) expression -> expression OR . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 97

state 75

    (47) expression -> PLUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 47 (expression -> PLUS expression .)
    PLUS            reduce using rule 47 (expression -> PLUS expression .)
    MINUS           reduce using rule 47 (expression -> PLUS expression .)
    EQ              reduce using rule 47 (expression -> PLUS expression .)
    GT              reduce using rule 47 (expression -> PLUS expression .)
    LT              reduce using rule 47 (expression -> PLUS expression .)
    GE              reduce using rule 47 (expression -> PLUS expression .)
    LE              reduce using rule 47 (expression -> PLUS expression .)
    AND             reduce using rule 47 (expression -> PLUS expression .)
    OR              reduce using rule 47 (expression -> PLUS expression .)
    NEWLINE         reduce using rule 47 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 47 (expression -> PLUS expression .)
    RPAREN          reduce using rule 47 (expression -> PLUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! TIMES           [ reduce using rule 47 (expression -> PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 76

    (46) expression -> MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 46 (expression -> MINUS expression .)
    PLUS            reduce using rule 46 (expression -> MINUS expression .)
    MINUS           reduce using rule 46 (expression -> MINUS expression .)
    EQ              reduce using rule 46 (expression -> MINUS expression .)
    GT              reduce using rule 46 (expression -> MINUS expression .)
    LT              reduce using rule 46 (expression -> MINUS expression .)
    GE              reduce using rule 46 (expression -> MINUS expression .)
    LE              reduce using rule 46 (expression -> MINUS expression .)
    AND             reduce using rule 46 (expression -> MINUS expression .)
    OR              reduce using rule 46 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 46 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 46 (expression -> MINUS expression .)
    RPAREN          reduce using rule 46 (expression -> MINUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! TIMES           [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 77

    (45) expression -> NOT expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 45 (expression -> NOT expression .)
    PLUS            reduce using rule 45 (expression -> NOT expression .)
    MINUS           reduce using rule 45 (expression -> NOT expression .)
    TIMES           reduce using rule 45 (expression -> NOT expression .)
    DIVIDE          reduce using rule 45 (expression -> NOT expression .)
    EQ              reduce using rule 45 (expression -> NOT expression .)
    GT              reduce using rule 45 (expression -> NOT expression .)
    LT              reduce using rule 45 (expression -> NOT expression .)
    GE              reduce using rule 45 (expression -> NOT expression .)
    LE              reduce using rule 45 (expression -> NOT expression .)
    AND             reduce using rule 45 (expression -> NOT expression .)
    OR              reduce using rule 45 (expression -> NOT expression .)
    NEWLINE         reduce using rule 45 (expression -> NOT expression .)
    RBRACKET        reduce using rule 45 (expression -> NOT expression .)
    RPAREN          reduce using rule 45 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 78

    (48) expression -> LPAREN expression . RPAREN
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 79

    (32) while_statement -> WHILE expression COLON . block
    (33) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 81

    block                          shift and go to state 99

state 80

    (18) register -> ID COLON block .

    TYPE            reduce using rule 18 (register -> ID COLON block .)
    COMMENT         reduce using rule 18 (register -> ID COLON block .)
    MLCOMMENT       reduce using rule 18 (register -> ID COLON block .)
    NEWLINE         reduce using rule 18 (register -> ID COLON block .)
    INT_TYPE        reduce using rule 18 (register -> ID COLON block .)
    FLOAT_TYPE      reduce using rule 18 (register -> ID COLON block .)
    CHAR_TYPE       reduce using rule 18 (register -> ID COLON block .)
    BOOL_TYPE       reduce using rule 18 (register -> ID COLON block .)
    ID              reduce using rule 18 (register -> ID COLON block .)
    IF              reduce using rule 18 (register -> ID COLON block .)
    WHILE           reduce using rule 18 (register -> ID COLON block .)
    DEF             reduce using rule 18 (register -> ID COLON block .)
    $end            reduce using rule 18 (register -> ID COLON block .)
    RBRACE          reduce using rule 18 (register -> ID COLON block .)


state 81

    (33) block -> LBRACE . statement_list RBRACE
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (23) assignment -> . ID EQUALS expression
    (24) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (26) assignment -> . declaration EQUALS expression
    (27) assignment -> . ID EQUALS assignment
    (29) if_statement -> . IF expression COLON block else
    (32) while_statement -> . WHILE expression COLON block
    (28) funct_decl -> . DEF

    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement_list                 shift and go to state 100
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 82

    (21) var_list -> var_list COMMA var_decl .

    COMMA           reduce using rule 21 (var_list -> var_list COMMA var_decl .)
    NEWLINE         reduce using rule 21 (var_list -> var_list COMMA var_decl .)
    EQUALS          reduce using rule 21 (var_list -> var_list COMMA var_decl .)


state 83

    (20) var_decl -> LBRACKET expression RBRACKET . ID

    ID              shift and go to state 101


state 84

    (25) assignment -> ID LBRACKET ID RBRACKET . EQUALS expression

    EQUALS          shift and go to state 102


state 85

    (24) assignment -> ID LBRACKET DECIMAL RBRACKET . EQUALS expression

    EQUALS          shift and go to state 103


state 86

    (29) if_statement -> IF expression COLON block . else
    (30) else -> . NEWLINE ELSE COLON block
    (31) else -> . NEWLINE

    NEWLINE         shift and go to state 105

    else                           shift and go to state 104

state 87

    (34) expression -> expression PLUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 34 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 34 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 34 (expression -> expression PLUS expression .)
    EQ              reduce using rule 34 (expression -> expression PLUS expression .)
    GT              reduce using rule 34 (expression -> expression PLUS expression .)
    LT              reduce using rule 34 (expression -> expression PLUS expression .)
    GE              reduce using rule 34 (expression -> expression PLUS expression .)
    LE              reduce using rule 34 (expression -> expression PLUS expression .)
    AND             reduce using rule 34 (expression -> expression PLUS expression .)
    OR              reduce using rule 34 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 34 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 34 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 34 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! TIMES           [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 88

    (35) expression -> expression MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 35 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 35 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 35 (expression -> expression MINUS expression .)
    EQ              reduce using rule 35 (expression -> expression MINUS expression .)
    GT              reduce using rule 35 (expression -> expression MINUS expression .)
    LT              reduce using rule 35 (expression -> expression MINUS expression .)
    GE              reduce using rule 35 (expression -> expression MINUS expression .)
    LE              reduce using rule 35 (expression -> expression MINUS expression .)
    AND             reduce using rule 35 (expression -> expression MINUS expression .)
    OR              reduce using rule 35 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 35 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 35 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 35 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! TIMES           [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 89

    (36) expression -> expression TIMES expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 36 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 36 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 36 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 36 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 36 (expression -> expression TIMES expression .)
    EQ              reduce using rule 36 (expression -> expression TIMES expression .)
    GT              reduce using rule 36 (expression -> expression TIMES expression .)
    LT              reduce using rule 36 (expression -> expression TIMES expression .)
    GE              reduce using rule 36 (expression -> expression TIMES expression .)
    LE              reduce using rule 36 (expression -> expression TIMES expression .)
    AND             reduce using rule 36 (expression -> expression TIMES expression .)
    OR              reduce using rule 36 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 36 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 36 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 36 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 90

    (37) expression -> expression DIVIDE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 37 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 37 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 37 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 37 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 37 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 37 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 37 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 37 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 37 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 37 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 37 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 37 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 37 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 37 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 37 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 91

    (38) expression -> expression EQ expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 38 (expression -> expression EQ expression .)
    EQ              reduce using rule 38 (expression -> expression EQ expression .)
    GT              reduce using rule 38 (expression -> expression EQ expression .)
    LT              reduce using rule 38 (expression -> expression EQ expression .)
    GE              reduce using rule 38 (expression -> expression EQ expression .)
    LE              reduce using rule 38 (expression -> expression EQ expression .)
    AND             reduce using rule 38 (expression -> expression EQ expression .)
    OR              reduce using rule 38 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 38 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 38 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 38 (expression -> expression EQ expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! PLUS            [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 92

    (39) expression -> expression GT expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 39 (expression -> expression GT expression .)
    EQ              reduce using rule 39 (expression -> expression GT expression .)
    GT              reduce using rule 39 (expression -> expression GT expression .)
    LT              reduce using rule 39 (expression -> expression GT expression .)
    GE              reduce using rule 39 (expression -> expression GT expression .)
    LE              reduce using rule 39 (expression -> expression GT expression .)
    AND             reduce using rule 39 (expression -> expression GT expression .)
    OR              reduce using rule 39 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 39 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 39 (expression -> expression GT expression .)
    RPAREN          reduce using rule 39 (expression -> expression GT expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! PLUS            [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 93

    (40) expression -> expression LT expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 40 (expression -> expression LT expression .)
    EQ              reduce using rule 40 (expression -> expression LT expression .)
    GT              reduce using rule 40 (expression -> expression LT expression .)
    LT              reduce using rule 40 (expression -> expression LT expression .)
    GE              reduce using rule 40 (expression -> expression LT expression .)
    LE              reduce using rule 40 (expression -> expression LT expression .)
    AND             reduce using rule 40 (expression -> expression LT expression .)
    OR              reduce using rule 40 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 40 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 40 (expression -> expression LT expression .)
    RPAREN          reduce using rule 40 (expression -> expression LT expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! PLUS            [ reduce using rule 40 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 94

    (41) expression -> expression GE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 41 (expression -> expression GE expression .)
    EQ              reduce using rule 41 (expression -> expression GE expression .)
    GT              reduce using rule 41 (expression -> expression GE expression .)
    LT              reduce using rule 41 (expression -> expression GE expression .)
    GE              reduce using rule 41 (expression -> expression GE expression .)
    LE              reduce using rule 41 (expression -> expression GE expression .)
    AND             reduce using rule 41 (expression -> expression GE expression .)
    OR              reduce using rule 41 (expression -> expression GE expression .)
    NEWLINE         reduce using rule 41 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 41 (expression -> expression GE expression .)
    RPAREN          reduce using rule 41 (expression -> expression GE expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! PLUS            [ reduce using rule 41 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 95

    (42) expression -> expression LE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 42 (expression -> expression LE expression .)
    EQ              reduce using rule 42 (expression -> expression LE expression .)
    GT              reduce using rule 42 (expression -> expression LE expression .)
    LT              reduce using rule 42 (expression -> expression LE expression .)
    GE              reduce using rule 42 (expression -> expression LE expression .)
    LE              reduce using rule 42 (expression -> expression LE expression .)
    AND             reduce using rule 42 (expression -> expression LE expression .)
    OR              reduce using rule 42 (expression -> expression LE expression .)
    NEWLINE         reduce using rule 42 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 42 (expression -> expression LE expression .)
    RPAREN          reduce using rule 42 (expression -> expression LE expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67

  ! PLUS            [ reduce using rule 42 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 68 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 70 ]
  ! GE              [ shift and go to state 71 ]
  ! LE              [ shift and go to state 72 ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 96

    (43) expression -> expression AND expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 43 (expression -> expression AND expression .)
    AND             reduce using rule 43 (expression -> expression AND expression .)
    OR              reduce using rule 43 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 43 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 43 (expression -> expression AND expression .)
    RPAREN          reduce using rule 43 (expression -> expression AND expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72

  ! PLUS            [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 97

    (44) expression -> expression OR expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    COLON           reduce using rule 44 (expression -> expression OR expression .)
    AND             reduce using rule 44 (expression -> expression OR expression .)
    OR              reduce using rule 44 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 44 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 44 (expression -> expression OR expression .)
    RPAREN          reduce using rule 44 (expression -> expression OR expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72

  ! PLUS            [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 74 ]


state 98

    (48) expression -> LPAREN expression RPAREN .

    COLON           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 48 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 48 (expression -> LPAREN expression RPAREN .)


state 99

    (32) while_statement -> WHILE expression COLON block .

    TYPE            reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    COMMENT         reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    MLCOMMENT       reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    NEWLINE         reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    INT_TYPE        reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    FLOAT_TYPE      reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    CHAR_TYPE       reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    BOOL_TYPE       reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    ID              reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    IF              reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    WHILE           reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    DEF             reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    $end            reduce using rule 32 (while_statement -> WHILE expression COLON block .)
    RBRACE          reduce using rule 32 (while_statement -> WHILE expression COLON block .)


state 100

    (33) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . if_statement
    (8) statement -> . TYPE register
    (9) statement -> . while_statement
    (10) statement -> . COMMENT NEWLINE
    (11) statement -> . MLCOMMENT NEWLINE
    (12) statement -> . funct_decl
    (13) statement -> . NEWLINE
    (14) declaration -> . INT_TYPE var_list
    (15) declaration -> . FLOAT_TYPE var_list
    (16) declaration -> . CHAR_TYPE var_list
    (17) declaration -> . BOOL_TYPE var_list
    (23) assignment -> . ID EQUALS expression
    (24) assignment -> . ID LBRACKET DECIMAL RBRACKET EQUALS expression
    (25) assignment -> . ID LBRACKET ID RBRACKET EQUALS expression
    (26) assignment -> . declaration EQUALS expression
    (27) assignment -> . ID EQUALS assignment
    (29) if_statement -> . IF expression COLON block else
    (32) while_statement -> . WHILE expression COLON block
    (28) funct_decl -> . DEF

    RBRACE          shift and go to state 106
    TYPE            shift and go to state 8
    COMMENT         shift and go to state 10
    MLCOMMENT       shift and go to state 11
    NEWLINE         shift and go to state 5
    INT_TYPE        shift and go to state 13
    FLOAT_TYPE      shift and go to state 14
    CHAR_TYPE       shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    DEF             shift and go to state 20

    statement                      shift and go to state 21
    declaration                    shift and go to state 4
    assignment                     shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 9
    funct_decl                     shift and go to state 12

state 101

    (20) var_decl -> LBRACKET expression RBRACKET ID .

    COMMA           reduce using rule 20 (var_decl -> LBRACKET expression RBRACKET ID .)
    NEWLINE         reduce using rule 20 (var_decl -> LBRACKET expression RBRACKET ID .)
    EQUALS          reduce using rule 20 (var_decl -> LBRACKET expression RBRACKET ID .)


state 102

    (25) assignment -> ID LBRACKET ID RBRACKET EQUALS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 107

state 103

    (24) assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression TIMES expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression EQ expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression
    (41) expression -> . expression GE expression
    (42) expression -> . expression LE expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression OR expression
    (45) expression -> . NOT expression
    (46) expression -> . MINUS expression
    (47) expression -> . PLUS expression
    (48) expression -> . LPAREN expression RPAREN
    (49) expression -> . DECIMAL
    (50) expression -> . BINARY
    (51) expression -> . OCTAL
    (52) expression -> . HEXADECIMAL
    (53) expression -> . FLOAT_CONST
    (54) expression -> . TRUE
    (55) expression -> . FALSE
    (56) expression -> . CHAR_CONST
    (60) expression -> . ID

    NOT             shift and go to state 41
    MINUS           shift and go to state 40
    PLUS            shift and go to state 39
    LPAREN          shift and go to state 42
    DECIMAL         shift and go to state 43
    BINARY          shift and go to state 44
    OCTAL           shift and go to state 45
    HEXADECIMAL     shift and go to state 46
    FLOAT_CONST     shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    CHAR_CONST      shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 108

state 104

    (29) if_statement -> IF expression COLON block else .

    TYPE            reduce using rule 29 (if_statement -> IF expression COLON block else .)
    COMMENT         reduce using rule 29 (if_statement -> IF expression COLON block else .)
    MLCOMMENT       reduce using rule 29 (if_statement -> IF expression COLON block else .)
    NEWLINE         reduce using rule 29 (if_statement -> IF expression COLON block else .)
    INT_TYPE        reduce using rule 29 (if_statement -> IF expression COLON block else .)
    FLOAT_TYPE      reduce using rule 29 (if_statement -> IF expression COLON block else .)
    CHAR_TYPE       reduce using rule 29 (if_statement -> IF expression COLON block else .)
    BOOL_TYPE       reduce using rule 29 (if_statement -> IF expression COLON block else .)
    ID              reduce using rule 29 (if_statement -> IF expression COLON block else .)
    IF              reduce using rule 29 (if_statement -> IF expression COLON block else .)
    WHILE           reduce using rule 29 (if_statement -> IF expression COLON block else .)
    DEF             reduce using rule 29 (if_statement -> IF expression COLON block else .)
    $end            reduce using rule 29 (if_statement -> IF expression COLON block else .)
    RBRACE          reduce using rule 29 (if_statement -> IF expression COLON block else .)


state 105

    (30) else -> NEWLINE . ELSE COLON block
    (31) else -> NEWLINE .

    ELSE            shift and go to state 109
    TYPE            reduce using rule 31 (else -> NEWLINE .)
    COMMENT         reduce using rule 31 (else -> NEWLINE .)
    MLCOMMENT       reduce using rule 31 (else -> NEWLINE .)
    NEWLINE         reduce using rule 31 (else -> NEWLINE .)
    INT_TYPE        reduce using rule 31 (else -> NEWLINE .)
    FLOAT_TYPE      reduce using rule 31 (else -> NEWLINE .)
    CHAR_TYPE       reduce using rule 31 (else -> NEWLINE .)
    BOOL_TYPE       reduce using rule 31 (else -> NEWLINE .)
    ID              reduce using rule 31 (else -> NEWLINE .)
    IF              reduce using rule 31 (else -> NEWLINE .)
    WHILE           reduce using rule 31 (else -> NEWLINE .)
    DEF             reduce using rule 31 (else -> NEWLINE .)
    $end            reduce using rule 31 (else -> NEWLINE .)
    RBRACE          reduce using rule 31 (else -> NEWLINE .)


state 106

    (33) block -> LBRACE statement_list RBRACE .

    TYPE            reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    COMMENT         reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    MLCOMMENT       reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    NEWLINE         reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    INT_TYPE        reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    FLOAT_TYPE      reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    CHAR_TYPE       reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    BOOL_TYPE       reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    DEF             reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 33 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 33 (block -> LBRACE statement_list RBRACE .)


state 107

    (25) assignment -> ID LBRACKET ID RBRACKET EQUALS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    NEWLINE         reduce using rule 25 (assignment -> ID LBRACKET ID RBRACKET EQUALS expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 108

    (24) assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . TIMES expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . EQ expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression
    (41) expression -> expression . GE expression
    (42) expression -> expression . LE expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . OR expression

    NEWLINE         reduce using rule 24 (assignment -> ID LBRACKET DECIMAL RBRACKET EQUALS expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    EQ              shift and go to state 68
    GT              shift and go to state 69
    LT              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    AND             shift and go to state 73
    OR              shift and go to state 74


state 109

    (30) else -> NEWLINE ELSE . COLON block

    COLON           shift and go to state 110


state 110

    (30) else -> NEWLINE ELSE COLON . block
    (33) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 81

    block                          shift and go to state 111

state 111

    (30) else -> NEWLINE ELSE COLON block .

    TYPE            reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    COMMENT         reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    MLCOMMENT       reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    NEWLINE         reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    INT_TYPE        reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    FLOAT_TYPE      reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    CHAR_TYPE       reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    BOOL_TYPE       reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    ID              reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    IF              reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    WHILE           reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    DEF             reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    $end            reduce using rule 30 (else -> NEWLINE ELSE COLON block .)
    RBRACE          reduce using rule 30 (else -> NEWLINE ELSE COLON block .)

