NEWLINE nl
DEF def
FLOAT_TYPE float
ID hacerCalculo
LPAREN (
INT_TYPE int
ID p
SEMICOLON ;
FLOAT_TYPE float
ID q
SEMICOLON ;
BOOL_TYPE bool
ID r
RPAREN )
COLON :
NEWLINE nl
LBRACE {
NEWLINE nl
FLOAT_TYPE float
ID resultado
NEWLINE nl
ID resultado
EQUALS =
ID p
PLUS +
ID q
NEWLINE nl
IF if
ID r
COLON :
NEWLINE nl
LBRACE {
NEWLINE nl
ID resultado
EQUALS =
ID resultado
TIMES *
DECIMAL 2
NEWLINE nl
RBRACE }
NEWLINE nl
RETURN return
ID resultado
NEWLINE nl
RBRACE }
NEWLINE nl
NEWLINE nl
ID valor
EQUALS =
ID hacerCalculo
LPAREN (
ID x
COMMA ,
FLOAT_CONST 3.14
COMMA ,
ID b
RPAREN )
NEWLINE nl
NEWLINE nl
ID valor
EQUALS =
ID hacerCalculo
LPAREN (
ID x
COMMA ,
FLOAT_CONST 3.14
COMMA ,
ID b
RPAREN )
PLUS +
ID hacerCalculo
LPAREN (
ID x
COMMA ,
FLOAT_CONST 3.14
COMMA ,
ID b
RPAREN )
NEWLINE nl
NEWLINE nl
DEF def
BOOL_TYPE bool
ID is_big_endian
LPAREN (
INT_TYPE int
ID p
RPAREN )
COLON :
NEWLINE nl
LBRACE {
NEWLINE nl
INT_TYPE int
ID x
COMMA ,
ID b
NEWLINE nl
ID x
EQUALS =
ID p
PLUS +
LPAREN (
ID x
DIVIDE /
ID b
RPAREN )
NEWLINE nl
RETURN return
ID hacer_calculo
LPAREN (
ID x
COMMA ,
FLOAT_CONST 3.14
COMMA ,
ID b
RPAREN )
NEWLINE nl
RBRACE }
