# Validación de comentarios

'''


COMENTARIO MULTILINEA


# COMENTARIO DENTRO DE COMENTARIO MULTILINEA

'''

# --- DECLARACIÓN DE VARIABLES ---
MiRegistro reg1            # Variable de tipo registro
int x, y, z                # Varias variables int en una sola línea
float valor, otra          # Variables de tipo float
bool b                     # Variable booleana
char car, otroCar          # Varias variables char
int[5] vec                 # Vector de 5 enteros
MiRegistro[2] regArray     # Vector de 2 registros de tipo MiRegistro
char[a * 2 + c] vec2    # El tamaño de un vector puede ser una expresión

# --- ASIGNACIONES BÁSICAS ---
x = 42
y = 0b101         # binario
z = 0o712         # octal
x = 0xAA          # hexadecimal
x = 3 * 5 + 2 * 8
valor = 12.34
otra = 1.5e2      # notación científica (150.0)
car = 'a'
otroCar = '9'
b = true
b = false
int[1932] vec
char[b + 3] vec2    # El tamaño de un vector puede ser una expresión

# --- DECLARACIONES CON ASIGNACIONES ---

int a = 5
char b = 'b'
char c = 102983    # Esto no debería de poderse pero es responsabilidad del semántico

# --- PRUEBAS CON OPERADORES ---
x = x + 10
y = y - 1
y = y * 2
valor = valor / 2.0
b = not b
b = true and false
b = false or (x == 170)

# --- Asignaciones múltiples ---
int a, b, c, d = 0
x = y = 0

# --- ASIGNACIONES A VECTORES Y PROPIEDADES DE REGISTRO ---
vec[0] = 100
vec[1] = x
reg1.a = x
reg1.f = valor
reg1.c = car
reg1._[0] = reg1._[1] = reg1._[2] = 0

# --- CONTROL DE FLUJO IF ---
if b: {
    x = x + 1
}

# --- CONTROL DE FLUJO IF/ELSE con else sin \n ---
if b: {
    x = x + 1
}else :
{
    x = x - 1
}

# --- CONTROL DE FLUJO IF/ELSE con else con \n ---
if b: {
    x = x + 1
}
else :
{
    x = x - 1
}




# --- BUCLE WHILE ---
while not b:
{
    y = y + 1
    if y > 20: {
        b = true
        while true:
        {
            x = x + 1
            if x > 10: {
                a = 2
            }
        }
    }
}



# --- VARIABLES DE TIPO REGISTRO ---

type MiRegistro:{
    int a
    float f
    char c
}

# --- DECLARACIÓN DE FUNCIÓN ---
def float hacerCalculo(int p; float q; bool r):
{
    float resultado
    resultado = p + q
    if r:
    {
        resultado = resultado * 2
    }
    return resultado
}

# --- LLAMADA A FUNCIÓN ---
valor = hacerCalculo(x, 3.14, b)

# --- FUNCION COMO OPERADOR ---

valor = hacerCalculo(x, 3.14, b) + hacerCalculo(x, 3.14, b)


# --- DECLARACION DE FUNCION CON RETORNO DE LLAMADA A FUNCION ---

def bool is_big_endian(int p):
{
    int x,b
    x = p + ( x / b)
    return hacer_calculo(x,3.14,b)
}